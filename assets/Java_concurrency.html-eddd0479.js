const l=JSON.parse('{"key":"v-1ff1a44f","path":"/interview/java_basics/Java_concurrency.html","title":"Java并发","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"并发编程的三要素？","slug":"并发编程的三要素","link":"#并发编程的三要素","children":[]},{"level":2,"title":"线程和进程的区别？","slug":"线程和进程的区别","link":"#线程和进程的区别","children":[]},{"level":2,"title":"守护线程和用户线程的区别？","slug":"守护线程和用户线程的区别","link":"#守护线程和用户线程的区别","children":[]},{"level":2,"title":"什么是线程安全？","slug":"什么是线程安全","link":"#什么是线程安全","children":[]},{"level":2,"title":"Java如何开启线程？怎么保证线程安全？","slug":"java如何开启线程-怎么保证线程安全","link":"#java如何开启线程-怎么保证线程安全","children":[]},{"level":2,"title":"线程有哪些状态？","slug":"线程有哪些状态","link":"#线程有哪些状态","children":[]},{"level":2,"title":"如何停止一个正在运行的线程？","slug":"如何停止一个正在运行的线程","link":"#如何停止一个正在运行的线程","children":[]},{"level":2,"title":"notify和notifyAll有什么区别？","slug":"notify和notifyall有什么区别","link":"#notify和notifyall有什么区别","children":[]},{"level":2,"title":"wait和sleep方法有什么区别？","slug":"wait和sleep方法有什么区别","link":"#wait和sleep方法有什么区别","children":[]},{"level":2,"title":"为什么wait和notify方法要在同步块中调用？","slug":"为什么wait和notify方法要在同步块中调用","link":"#为什么wait和notify方法要在同步块中调用","children":[]},{"level":2,"title":"Thread类中的yield方法有什么作用？","slug":"thread类中的yield方法有什么作用","link":"#thread类中的yield方法有什么作用","children":[]},{"level":2,"title":"volatile和Synchronized有什么区别？","slug":"volatile和synchronized有什么区别","link":"#volatile和synchronized有什么区别","children":[]},{"level":2,"title":"volatile变量和atomic变量什么不同？","slug":"volatile变量和atomic变量什么不同","link":"#volatile变量和atomic变量什么不同","children":[]},{"level":2,"title":"interrupted和isInterrupted方法的区别？","slug":"interrupted和isinterrupted方法的区别","link":"#interrupted和isinterrupted方法的区别","children":[]},{"level":2,"title":"volatile能不能保证线程安全？","slug":"volatile能不能保证线程安全","link":"#volatile能不能保证线程安全","children":[]},{"level":2,"title":"DCL单例为什么加volatile？","slug":"dcl单例为什么加volatile","link":"#dcl单例为什么加volatile","children":[]},{"level":2,"title":"死锁与活锁的区别？","slug":"死锁与活锁的区别","link":"#死锁与活锁的区别","children":[]},{"level":2,"title":"死锁与饥饿的区别？","slug":"死锁与饥饿的区别","link":"#死锁与饥饿的区别","children":[]},{"level":2,"title":"按照线程安全的强度来区分，分为哪几类？","slug":"按照线程安全的强度来区分-分为哪几类","link":"#按照线程安全的强度来区分-分为哪几类","children":[]},{"level":2,"title":"线程安全的实现方法有哪些？","slug":"线程安全的实现方法有哪些","link":"#线程安全的实现方法有哪些","children":[]},{"level":2,"title":"锁优化技术你了解什么？","slug":"锁优化技术你了解什么","link":"#锁优化技术你了解什么","children":[]},{"level":2,"title":"Lock与synchronized有什么区别？","slug":"lock与synchronized有什么区别","link":"#lock与synchronized有什么区别","children":[]},{"level":2,"title":"什么是阻塞队列？阻塞队列的实现原理是什么？","slug":"什么是阻塞队列-阻塞队列的实现原理是什么","link":"#什么是阻塞队列-阻塞队列的实现原理是什么","children":[]},{"level":2,"title":"什么是Callable和Future？","slug":"什么是callable和future","link":"#什么是callable和future","children":[]},{"level":2,"title":"Java线程锁机制是怎样的？偏向锁、轻量级锁、重量级锁有什么区别？锁机制是如何升级的？","slug":"java线程锁机制是怎样的-偏向锁、轻量级锁、重量级锁有什么区别-锁机制是如何升级的","link":"#java线程锁机制是怎样的-偏向锁、轻量级锁、重量级锁有什么区别-锁机制是如何升级的","children":[]},{"level":2,"title":"什么是可重入锁？有哪些实现？","slug":"什么是可重入锁-有哪些实现","link":"#什么是可重入锁-有哪些实现","children":[]},{"level":2,"title":"什么是悲观锁？什么是乐观锁？","slug":"什么是悲观锁-什么是乐观锁","link":"#什么是悲观锁-什么是乐观锁","children":[]},{"level":2,"title":"谈谈你对AQS的理解，AQS如何实现可重入锁？","slug":"谈谈你对aqs的理解-aqs如何实现可重入锁","link":"#谈谈你对aqs的理解-aqs如何实现可重入锁","children":[]},{"level":2,"title":"SynchronizedMap和ConcurrentHashMap有什么区别？","slug":"synchronizedmap和concurrenthashmap有什么区别","link":"#synchronizedmap和concurrenthashmap有什么区别","children":[]},{"level":2,"title":"ConcurrentHashMap的并发度是什么？","slug":"concurrenthashmap的并发度是什么","link":"#concurrenthashmap的并发度是什么","children":[]},{"level":2,"title":"CopyOnWriteArrayList可以用于什么应用场景？","slug":"copyonwritearraylist可以用于什么应用场景","link":"#copyonwritearraylist可以用于什么应用场景","children":[]},{"level":2,"title":"有A、B、C三个线程，如何保证三个线程同时执行？如何在并发情况下保证三个线程依次执行？如何保证三个线程有序交错进行？","slug":"有a、b、c三个线程-如何保证三个线程同时执行-如何在并发情况下保证三个线程依次执行-如何保证三个线程有序交错进行","link":"#有a、b、c三个线程-如何保证三个线程同时执行-如何在并发情况下保证三个线程依次执行-如何保证三个线程有序交错进行","children":[]},{"level":2,"title":"什么是指令重排序？","slug":"什么是指令重排序","link":"#什么是指令重排序","children":[]},{"level":2,"title":"ThreadLocal的作用？导致内存泄漏的原因是什么？","slug":"threadlocal的作用-导致内存泄漏的原因是什么","link":"#threadlocal的作用-导致内存泄漏的原因是什么","children":[]},{"level":2,"title":"使用线程池有什么好处？","slug":"使用线程池有什么好处","link":"#使用线程池有什么好处","children":[]},{"level":2,"title":"线程池中submit()和execute()方法有什么区别？","slug":"线程池中submit-和execute-方法有什么区别","link":"#线程池中submit-和execute-方法有什么区别","children":[]},{"level":2,"title":"什么是Executors框架？","slug":"什么是executors框架","link":"#什么是executors框架","children":[]},{"level":2,"title":"线程池的拒绝策略？","slug":"线程池的拒绝策略","link":"#线程池的拒绝策略","children":[]},{"level":2,"title":"如何获取子线程的执行结果？","slug":"如何获取子线程的执行结果","link":"#如何获取子线程的执行结果","children":[]},{"level":2,"title":"如何对一个字符串快速进行排序？","slug":"如何对一个字符串快速进行排序","link":"#如何对一个字符串快速进行排序","children":[]},{"level":2,"title":"线程池的参数如何设置？","slug":"线程池的参数如何设置","link":"#线程池的参数如何设置","children":[]}],"git":{"updatedTime":1701919270000,"contributors":[{"name":"jiyongchao","email":"jycoder@163.com","commits":1}]},"filePathRelative":"interview/java_basics/Java_concurrency.md"}');export{l as data};
