(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{408:function(a,t,s){"use strict";s.r(t);var i=s(13),v=Object(i.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"elasticsearch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[a._v("#")]),a._v(" Elasticsearch")]),a._v(" "),s("h2",{attrs:{id:"什么是倒排索引-有什么好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是倒排索引-有什么好处"}},[a._v("#")]),a._v(" 什么是倒排索引？有什么好处？")]),a._v(" "),s("p",[a._v("索引：从id到内容。")]),a._v(" "),s("p",[a._v("倒排索引：从内容到id。好处：比较适合做关键字检索。可以控制数据的总量。提高查询效率。")]),a._v(" "),s("p",[a._v("搜索引擎为什么MySQL查询快？lucence是es的底层框架")]),a._v(" "),s("p",[a._v("文章 -> term ->排序 term dictionary （这里类似新华字典 目录）-> term index（a开头的拼音） -> Posting List -> 文章ID，[在文章中出现的偏移量]，权重（TFIDF）")]),a._v(" "),s("h2",{attrs:{id:"es了解多少-说说你们公司的es集群架构。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es了解多少-说说你们公司的es集群架构。"}},[a._v("#")]),a._v(" ES了解多少？说说你们公司的ES集群架构。")]),a._v(" "),s("p",[a._v("是一个基于Lucene框架（是一个非常高效的全文检索引擎框架）的搜索引擎产品，you know for search,提供了restful风格的操作接口。")]),a._v(" "),s("p",[a._v("ES包含了一些核心概念：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("索引 index：类似关系型数据库中的table")])]),a._v(" "),s("li",[s("p",[a._v("文档 document：row")]),a._v(" "),s("ul",[s("li",[a._v("字段 field text\\keyword\\byte：列")])])]),a._v(" "),s("li",[s("p",[a._v("映射Mapping：Schema")]),a._v(" "),s("ul",[s("li",[a._v("查询方式：DSL（ES的新版本也支持SQL）")])])]),a._v(" "),s("li",[s("p",[a._v("分片sharding和副本replicas：index都是由sharding组成的。每个sharding都有一个或者多个备份。")])])]),a._v(" "),s("p",[a._v("另外关于ES的使用场景：ES可以用在大数量的搜索场景下，另外ES也有很强大的计算能力，可以用在用户画像等场景。")]),a._v(" "),s("h2",{attrs:{id:"如何进行中文分词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何进行中文分词"}},[a._v("#")]),a._v(" 如何进行中文分词？")]),a._v(" "),s("p",[a._v("IK分词器。HanLp中文分词器。")]),a._v(" "),s("h2",{attrs:{id:"es写入数据与查询数据的原理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es写入数据与查询数据的原理。"}},[a._v("#")]),a._v(" ES写入数据与查询数据的原理。")]),a._v(" "),s("p",[a._v("写入数据的原理：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("客户端发写数据的请求是，可以发往任意节点，这个节点就会成为coordinating node 协调节点")])]),a._v(" "),s("li",[s("p",[a._v("计算的点文档要写入的分片：计算时就采用hash取模的方式计算")])]),a._v(" "),s("li",[s("p",[a._v("协调节点就会进行路由，将请求转发给对应的primary sharding所在的datanode。")])]),a._v(" "),s("li",[s("p",[a._v("datanode节点上的primary sharding处理请求，写入数据到索引库，并且将数据同步到对应的replica sharding")])]),a._v(" "),s("li",[s("p",[a._v("等promary sharding 和 replica sharding都保存好文档了之后，返回客户端响应")])])]),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630005849.png",alt:"img"}}),a._v(" "),s("p",[a._v("查询数据的原理：")]),a._v(" "),s("ol",[s("li",[a._v("客户端发送请求可发给任意节点，这个节点就成为协调节点；")]),a._v(" "),s("li",[a._v("协调节点将查询请求广播到每一个数据节点，这些数据节点的分片就会处理该查询请求；")]),a._v(" "),s("li",[a._v("每个分片进行数据查询，将符合条件的数据放在一个队列当中，并将这些数据的文档ID、节点信息、分片信息都返回给协调节点；")]),a._v(" "),s("li",[a._v("由协调节点将所有的返回结果进行汇总，并排序；")]),a._v(" "),s("li",[a._v("协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据整合返回给客户端。")])]),a._v(" "),s("h2",{attrs:{id:"es部署时-要如何进行优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es部署时-要如何进行优化"}},[a._v("#")]),a._v(" ES部署时，要如何进行优化？")]),a._v(" "),s("ol",[s("li",[a._v("集群部署优化")]),a._v(" "),s("li",[a._v("调整ES的一些重要参数。path.data尽量使用固态硬盘，定制JVM堆内存大小，ES的参数，实际上大部分情况下是不需要调优的，如果有性能问题，最好的办法是安排更合里的sharding布局并且增加节点数据。")]),a._v(" "),s("li",[a._v("更合理的sharding布局，让sharding对应的replica sharding尽量在同一个机房。")]),a._v(" "),s("li",[a._v("Linux服务器上一些优化策略，不要用root用户：修改虚拟内存大小，修改普通用户可以创建的最大线程数。")])]),a._v(" "),s("p",[a._v("ES生态：ELK日志收集解决方案：filebeat -> logstash -> elaticsearch -> kibana。")])])}),[],!1,null,null,null);t.default=v.exports}}]);