(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{410:function(s,t,a){"use strict";a.r(t);var e=a(13),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[s._v("#")]),s._v(" Redis")]),s._v(" "),a("h2",{attrs:{id:"为什么使用缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用缓存"}},[s._v("#")]),s._v(" 为什么使用缓存？")]),s._v(" "),a("p",[s._v("保证服务的高性能和高可用。Redis的一般流程如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630004746.png",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"什么是缓存穿透-缓存击穿-缓存雪崩-怎么解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存穿透-缓存击穿-缓存雪崩-怎么解决"}},[s._v("#")]),s._v(" 什么是缓存穿透？缓存击穿？缓存雪崩？怎么解决？")]),s._v(" "),a("p",[s._v("1）缓存穿透：缓存中查不多，数据库中也查询不到。")]),s._v(" "),a("p",[s._v("解决方案：1.对参数进行合法性校验 2.将数据库中没有查到的结果的数据也写入到缓存，这时要注意为了防止Redis被无用的key占满，这一类缓存的有效期要设置得短一点。3.引入布隆过滤器，在访问Redis之前判断数据是否存在。要注意布隆过滤器存在一定的误判率，并且，不空过滤器只能加数据不能删数据。")]),s._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630102137.png",alt:"img"}}),s._v(" "),a("p",[s._v("2）缓存击穿：缓存中没有，数据库中有，一般是出现在数据初始化以及key过期了的情况，他的问题在于，重新写入缓存需要一定的时间，如果是在高并发场景下，过多的请求就会瞬间写到DB上，给DB造成了很大的压力。")]),s._v(" "),a("p",[s._v("解决方案：1、设置这个热点缓存永不过期，这时要注意在value 当中包含一个逻辑上的过期时间，然后另起一个线程，定期重建这些缓存。2、在加载DB的时候，要防止并发，只通过一个线程将数据库中的数据加载到缓存当中，从而减少数据库的并发访问量。")]),s._v(" "),a("p",[s._v("3）缓存雪崩：缓存大面积过期，导致请求都被转发DB，")]),s._v(" "),a("p",[s._v("解决方案：1、把缓存的失效时间分散开，例如，在原有的统一失效时间基础上，增加一个随机值。")]),s._v(" "),a("h2",{attrs:{id:"如何保证redis与数据库的数据一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证redis与数据库的数据一致"}},[s._v("#")]),s._v(" 如何保证Redis与数据库的数据一致？")]),s._v(" "),a("p",[s._v("当我们对数据进行修改的时候，到底是先删缓存，还是先写数据库？")]),s._v(" "),a("p",[s._v("1）如果是先删缓存，再写数据库：在高并发场景下，当第一个线程删除了缓存，还没有来得及的写数据库，第二个线程来独去数据，会发现缓存中的数据为空，那就会去读数据库中的数据（旧值、脏数据）读完之后，把读到的结果写入缓存（此时，第一个线程已经将新的值写到缓存里面了），这样缓存中的值就会被覆盖为修改前的脏数据。")]),s._v(" "),a("p",[s._v("总结：在这种方式下，通常要求写操作不会太频繁。")]),s._v(" "),a("p",[s._v("解决方案：1、先操作缓存，但是不删除缓存，将缓存修改为一个特殊值（-999），客户端读缓存时，发现是默认直，就休眠一小会，再去查一次Redis，特殊值对业务有侵入，可能会多次重复")]),s._v(" "),a("p",[s._v("2、延时双删，先删除缓存，再写数据库，休眠一小会，再次删除缓存。如果数据写操作很频繁，同样还是会有脏数据的问题。")]),s._v(" "),a("p",[s._v("2）先写数据库，再删缓存，如果数据库写完了之后，缓存删除失败，数据就会不一致，")]),s._v(" "),a("p",[s._v("总结：始终只能保证一定时间内的最终一致性。")]),s._v(" "),a("p",[s._v("解决方案：1、给缓存设置一个过期时间，问题：过期时间内，缓存数据不会更新。")]),s._v(" "),a("p",[s._v("2、引入MQ，保证原子操作。将热点数据缓存设置为永不过期，但是在value当中写入一个逻辑上的过期时间，另起一个后台线程，扫描这些key，对于已逻辑上过期的缓存，进行删除。")]),s._v(" "),a("h2",{attrs:{id:"如何设计一个分布式锁-如何对锁性能进行优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何设计一个分布式锁-如何对锁性能进行优化"}},[s._v("#")]),s._v(" 如何设计一个分布式锁？如何对锁性能进行优化？")]),s._v(" "),a("p",[s._v("分布式锁的本质：就是在所有进程都能访问到的一个地方，设置一个锁资源，让这些进程都来竞争锁的资源，数据库、zookeeper、Redis，通常对于分布式锁，会要求响应快、性能高与业务无关。")]),s._v(" "),a("p",[s._v("Redis实现分布式锁：SETNX key value 当key不存在时，就将key设置为value，并返回1，如果key存在就返回0。EXPIRE key locktime 设置key的有效市场，DEL key 删除。 GETSET key value 先GET，再SET，先返回key对应的值，如果没有就返回空，然后再将key设置成value。")]),s._v(" "),a("ul",[a("li",[s._v("最简单的分布式锁：SETNX 加锁。DEL解锁。问题：如果获取到锁的进程执行失败，他就永远不会主动解锁，那这个锁就被锁死了。")]),s._v(" "),a("li",[s._v("给锁设置过期时长。问题：SETNX和EXPIRE并不是原子性的，所以获取到锁的进程有可能还没有执行EXPIRE指令，就挂了，这时锁还是会被锁死。")]),s._v(" "),a("li",[s._v("将锁的内容设置为过期时间（客户端时间+过期时长），SETNX获取锁失败时，拿这个时间跟当前时间比对，如果是过期的锁，就先删除锁，再重新上锁。问题：在高并发场景下，会产生多个进程同时拿到锁的情况")]),s._v(" "),a("li",[s._v("setNX失败后，获取锁上的时间戳，然后用getset，将自己的过期时间更新上去，并获取旧值，如果这个旧值，跟之前获得的时间戳是不一致的，就表示这个锁已经被其他进程占用了，自己要放弃竞争锁。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisConnection")]),s._v(" conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" newTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" expireTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nowTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SETNX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mykey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("EXPIRE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mykey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" oldVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mykey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" oldVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" nowTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" currentVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GETSET")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mykey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("expireTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" currentVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("EXPIRE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mykey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("上面就形成了一个比较高效的分布式锁。分析一下，上面优化的各种问题，在于SETNX和EXPIRE两个指令无法保证原子性。Redis2.6提供了直接执行lua脚本的方式，通过lua脚本来保证原子性，redission。")]),s._v(" "),a("h2",{attrs:{id:"redis如何让配置key的过期时间-他的实现原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis如何让配置key的过期时间-他的实现原理是什么"}},[s._v("#")]),s._v(" Redis如何让配置key的过期时间？他的实现原理是什么？")]),s._v(" "),a("p",[s._v("redis设置key的过期时间：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ EXPIRE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" SETEX\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("实现原理：")]),s._v(" "),a("ul",[a("li",[s._v("定期删除：每隔一段时间，执行一次删除过期key的操作，平衡执行效率和执行时长。定期删除会遍历每个database（默认16个），检查当前库中指定个数的key（默认是20个），随机抽查这些key，如果有过期的，就删除。程序中有一个全局变量扫描到了哪个数据库。")]),s._v(" "),a("li",[s._v("懒汉式删除：当使用get、getset等指令去获取数据时，判断key是否过期，过期后，就先把key删除，再执行后面的操作。")])]),s._v(" "),a("p",[s._v("Redis是将两种方式结合来使用的。")]),s._v(" "),a("h2",{attrs:{id:"海量数据下-如何快速查找一条记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#海量数据下-如何快速查找一条记录"}},[s._v("#")]),s._v(" 海量数据下，如何快速查找一条记录？")]),s._v(" "),a("p",[s._v("1、使用布隆过滤器，快速过滤不存在的记录，使用Redis的bitmap结构来实现布隆过滤器。")]),s._v(" "),a("p",[s._v("2、在Redis中建立缓存")]),s._v(" "),a("p",[s._v("3、查询优化。自己实现槽位计算，找到记录应该分配在哪台集器上，然后直接去目标机器上找。")]),s._v(" "),a("h2",{attrs:{id:"rdb操作-子进程会全部复制父进程的数据吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb操作-子进程会全部复制父进程的数据吗"}},[s._v("#")]),s._v(" RDB操作，子进程会全部复制父进程的数据吗？")]),s._v(" "),a("p",[s._v("RDB快照是一次全量备份，当进行快照持久化的时候会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，父进程修改内存子进程不会反应出来，所以快照持久化期间修改的数据不会保存，存在丢失数据的可能性。")]),s._v(" "),a("h2",{attrs:{id:"redis的哨兵模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的哨兵模式"}},[s._v("#")]),s._v(" Redis的哨兵模式？")]),s._v(" "),a("p",[s._v("哨兵模式是Redis一种特殊的模式，Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。")]),s._v(" "),a("h2",{attrs:{id:"redis使用单线程为什么速度这么快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis使用单线程为什么速度这么快"}},[s._v("#")]),s._v(" Redis使用单线程为什么速度这么快？")]),s._v(" "),a("p",[s._v("严格意义上来说，Redis Server是多线程的，只是它的请求处理整个流程是单线程处理的，我们平常说的Redis单线程快是指它的请求处理非常地块。")]),s._v(" "),a("p",[s._v("Redis每秒可以承受10w+的QPS，它如此优秀的性能主要取决于以下几个方面：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("纯内存操作")]),s._v(" "),a("p",[s._v("所有的数据都存储在内存当中，这意味着读写数据都是在内存中完成，并且使用哈希表的数据结构，只需要O(1)的时间复杂度。")])]),s._v(" "),a("li",[a("p",[s._v("使用IO多路复用技术")]),s._v(" "),a("p",[s._v("Redis采用IO多路复用计数和非阻塞IO，Redis可以在单线程中监听多个Socket的请求，在任意一个Socket可读/可写时，Redis去读取客户端请求，在内存中操作对应的数据，然后再写回到Socket中。")])]),s._v(" "),a("li",[a("p",[s._v("非CPU密集型任务")]),s._v(" "),a("p",[s._v("Redis的大部分操作并不是CPU密集型任务，而Redis的瓶颈在于内存和网络带宽，如果单个Redis实例的性能不足以支撑业务，推荐部署多个Redis节点，组成集群的方式来利用多核CPU的能力。")])]),s._v(" "),a("li",[a("p",[s._v("单线程的优势")]),s._v(" "),a("p",[s._v("没有了线程上下文切换的性能耗损，也没有了访问共享资源加锁的性能损耗，开发和调试非常友好，可维护性高。")])])]),s._v(" "),a("h2",{attrs:{id:"redis自增命令使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis自增命令使用"}},[s._v("#")]),s._v(" Redis自增命令使用？")]),s._v(" "),a("p",[s._v("每当有原子性自增的操作就可以使用INCR命令，主要在计数器场景使用，可以INCR和EXPIRE，来达到规定的生存时间内进行计数的目的，客户端也可以通过使用GETSET命令原子性地获取计数器的当前值并将计数器清零。")]),s._v(" "),a("p",[s._v("使用其他自增/自减操作，比如DECR和INCRBY，用户可以通过执行不同的操作增加或者减少计数器的值。")]),s._v(" "),a("h2",{attrs:{id:"高并发下-如何保证接口的幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高并发下-如何保证接口的幂等性"}},[s._v("#")]),s._v(" 高并发下，如何保证接口的幂等性？")]),s._v(" "),a("p",[s._v("https://segmentfault.com/a/1190000039737646")]),s._v(" "),a("h2",{attrs:{id:"redis在内存不足时-淘汰机制是怎样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis在内存不足时-淘汰机制是怎样的"}},[s._v("#")]),s._v(" Redis在内存不足时，淘汰机制是怎样的？")]),s._v(" "),a("h2",{attrs:{id:"redis如何实现消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis如何实现消息队列"}},[s._v("#")]),s._v(" Redis如何实现消息队列？")]),s._v(" "),a("h2",{attrs:{id:"reddison-实现分布式锁的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reddison-实现分布式锁的原理"}},[s._v("#")]),s._v(" Reddison 实现分布式锁的原理？")])])}),[],!1,null,null,null);t.default=n.exports}}]);