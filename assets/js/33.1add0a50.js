(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{416:function(t,v,_){"use strict";_.r(v);var a=_(13),l=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"java网络通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java网络通信"}},[t._v("#")]),t._v(" Java网络通信")]),t._v(" "),_("h2",{attrs:{id:"tcp和udp有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp有什么区别"}},[t._v("#")]),t._v(" TCP和UDP有什么区别？")]),t._v(" "),_("p",[t._v("TCP（Transfer Control Protocol）是一种面向连接的、可靠的、传输层通讯协议。")]),t._v(" "),_("p",[t._v("TCP的特点：类似打电话，面向连接的、点对点的通信、高可靠的，效率比较低，占用的系统资源比较多。")]),t._v(" "),_("p",[t._v("UDP（User Datagram Protocol）是一种无连接的、不可靠的、传输层的通讯协议。")]),t._v(" "),_("p",[t._v("UDP的特点：类似广播，不需要连接，发送方不管接受方有没有准备好，直接发消息，可以进行广播发送的，传输不可靠，有可能丢失消息，效率比较高，协议比较简单，占用的系统资源比较少。")]),t._v(" "),_("h2",{attrs:{id:"tcp为什么是三次握手-而不是两次"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp为什么是三次握手-而不是两次"}},[t._v("#")]),t._v(" TCP为什么是三次握手，而不是两次？")]),t._v(" "),_("p",[t._v("TCP建立连接三次握手，断开连接四次挥手。 如果是两次握手，可能会造成连接资源浪费的情况，server端会建立通道一直等待连接，但是client端会认为连接失败，放弃本次通信。")]),t._v(" "),_("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630005545.png",alt:"img"}}),t._v(" "),_("h2",{attrs:{id:"java有哪几种io模型-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java有哪几种io模型-有什么区别"}},[t._v("#")]),t._v(" Java有哪几种IO模型？有什么区别？")]),t._v(" "),_("p",[t._v("有BIO 同步阻塞IO、NIO 同步非阻塞IO、AIO异步非阻塞IO模型。")]),t._v(" "),_("p",[t._v("这里的同步、异步针对请求，阻塞和非阻塞针对客户端。")]),t._v(" "),_("p",[t._v("在一个网络请求中，客户端会发一个请求到服务端：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("客户端发了请求后，就一直等着服务端响应，客户端：阻塞。请求：同步")])]),t._v(" "),_("li",[_("p",[t._v("客户端发了请求后，就去干别的事情了，是不是的过来检查服务端是否给出了响应，客户端：非阻塞，请求：同步")])]),t._v(" "),_("li",[_("p",[t._v("换成异步请求，客户端发了请求后，就坐在椅子上，等着服务端返回响应。客户端：阻塞，请求：异步。")])]),t._v(" "),_("li",[_("p",[t._v("客户端发了请求后，就去干别的事情了，等到服务端给出响应后，再来处理业务逻辑。客户端：非阻塞。请求：异步")])])]),t._v(" "),_("p",[t._v("具体区别如下：")]),t._v(" "),_("p",[t._v("BIO模式：可靠性差，吞吐量低，适用于连接比较少且比较固定的场景，JDK1.4之前唯一的选择。编程模型最简单。")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202206142338449.png",alt:"image-20220614233811412"}}),t._v(" "),_("p",[t._v("NIO模型：可靠性比较好，吞吐量比较高，适用于连接多，并且连接比较短（轻操作），例如聊天室，JDK1.4开始支持，编程模型最复杂。")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202206142339799.png",alt:"image-20220614233902764"}}),t._v(" "),_("p",[t._v("AIO模型：可靠性是最好的，吞吐量也是最高的，适用于连接比较多，并且连接比较长（重操作），例如相册服务器，JDK7开始支持的，变成模型相对简单，但是需要操作系统支持。")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202206142339216.png",alt:"image-20220614233942183"}}),t._v(" "),_("h2",{attrs:{id:"java-nio的几个核心组件是什么-分别有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-nio的几个核心组件是什么-分别有什么作用"}},[t._v("#")]),t._v(" Java NIO的几个核心组件是什么？分别有什么作用？")]),t._v(" "),_("p",[t._v("Java NIO的几个核心组件有：Channel、Buffer、Selector，它们之间的关系如下：")]),t._v(" "),_("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://segmentfault.com/img/remote/1460000037714808",alt:"NIO"}}),t._v(" "),_("p",[t._v("Channel类似于流，每个Channel对应一个Buffer缓冲区，Channel会注册到Selector，Selector会根据Channel上发生的读写时间，将请求交由某个空闲的线程处理，Selector对应一个或者多个线程。Buffer和Channel都是可读可写的。")]),t._v(" "),_("h2",{attrs:{id:"select、poll、epoll有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#select、poll、epoll有什么区别"}},[t._v("#")]),t._v(" select、poll、epoll有什么区别？")]),t._v(" "),_("p",[t._v("他们是NIO中多路复用的三种实现机制，是由linux操作系统提供的。")]),t._v(" "),_("p",[t._v("用户空间和内核空间：操作系统为了保护系统安全，将内核划分为两个部分，一个是用户空间，一个是内核空间。用户空间不能直接访问底层的硬件设备，必须通过内核空间。")]),t._v(" "),_("p",[t._v("文件描述符 File Descriptor（FD）：是一个抽象的概念，形式上是一个整数，实际上是一个索引值。指向内核中为每个进程维护进程所打开的文件的记录表。当程序打开一个文件或者创建一个文件时，内核就会向进程返回一个FD，Unix、Linux。")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("select机制：会维护一个FD的结合fd_set。将fd_set从用户空间复制到内核空间，激活socket。")])]),t._v(" "),_("li",[_("p",[t._v("poll机制：和select机制差不多的。把fd_set结构进行了优化，FD集合的大小就突破了操作系统的限制，poll fd结构来代替fd_set，通过链表实现")])]),t._v(" "),_("li",[_("p",[t._v("epoll(Event poll)：epoll中不再扫描所有的FD，而是只将用户关心的FD的事件存放到内核的一个事件表当中。这样就可以减少用户空间与内核空间之前需要拷贝的数据。")])])]),t._v(" "),_("p",[t._v("总结如下表：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("操作方式")]),t._v(" "),_("th",[t._v("底层实现")]),t._v(" "),_("th",[t._v("最大连接数")]),t._v(" "),_("th",[t._v("IO效率")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("select")]),t._v(" "),_("td",[t._v("遍历")]),t._v(" "),_("td",[t._v("数组")]),t._v(" "),_("td",[t._v("受限于内核")]),t._v(" "),_("td",[t._v("一般")])]),t._v(" "),_("tr",[_("td",[t._v("poll")]),t._v(" "),_("td",[t._v("遍历")]),t._v(" "),_("td",[t._v("链表")]),t._v(" "),_("td",[t._v("无上限")]),t._v(" "),_("td",[t._v("一般")])]),t._v(" "),_("tr",[_("td",[t._v("epoll")]),t._v(" "),_("td",[t._v("事件回调")]),t._v(" "),_("td",[t._v("红黑树")]),t._v(" "),_("td",[t._v("无上限")]),t._v(" "),_("td",[t._v("高")])])])]),t._v(" "),_("p",[t._v("那Java的NIO当中时使用的哪种机制呢？")]),t._v(" "),_("p",[t._v("与操作系统有关，在windows下，WindowsSelectorProvider。而linux下，根据linux的内核版本，2.6内核版本以上，就是EpollSelectorProvider，默认使用的是PollSelectorProvider")]),t._v(" "),_("h2",{attrs:{id:"描述下http和https的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#描述下http和https的区别"}},[t._v("#")]),t._v(" 描述下HTTP和HTTPS的区别？")]),t._v(" "),_("p",[t._v("HTTP：是互联网上应用最为广泛的一种网络通信协议，基于TCP协议，可以使用浏览器工作更为高效，减少网络传输。")]),t._v(" "),_("p",[t._v("HTTPS：是HTTP的加强版，可以认为是HTTP + SSL（Secure Socket Layer）。在HTTP的基础上增加了一系列的安全机制，一方面保证数据传输安全，另一方面对访问者增加了验证机制。是目前现行架构下，最为安全的解决方案。")]),t._v(" "),_("p",[t._v("主要区别：")]),t._v(" "),_("ol",[_("li",[t._v("HTTP的连接时简单无状态的，HTTPS的数据传输时经过证书加密的，安全性更高。")]),t._v(" "),_("li",[t._v("HTTP是免费的，而HTTPS需要申请证书，而证书通常是收费的，并且费用一般不低。")]),t._v(" "),_("li",[t._v("他们的传输协议不同，所以他们使用的端口也是不一样的，HTTP默认端口是80，而HTTPS默认是443端口")])]),t._v(" "),_("p",[t._v("HTTPS的缺点：")]),t._v(" "),_("ol",[_("li",[t._v("HTTPS的握手协议比较费时，所以会影响服务的响应速度以及吞吐量。")]),t._v(" "),_("li",[t._v("HTTPS也并不是完全安全的，他的证书体系并不是完全安全的。  并且HTTPS在面对DDOS这样的攻击时，几乎起不到任何作用。")]),t._v(" "),_("li",[t._v("证书不免费，并且功能越强大的证书费用越高。")])]),t._v(" "),_("h2",{attrs:{id:"三次握手和四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三次握手和四次挥手"}},[t._v("#")]),t._v(" 三次握手和四次挥手？")]),t._v(" "),_("p",[t._v("所谓三次握手，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包，三次握手的目的是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。")]),t._v(" "),_("p",[t._v("在socket编程中，客户端执行"),_("code",[t._v("connect")]),t._v("时，将触发三次握手：")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210824102759.png",alt:"三次握手示意图"}}),t._v(" "),_("p",[t._v("TCP的连接的拆除需要发送四个包，因此称为四次握手，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行"),_("code",[t._v("close()")]),t._v("操作即可产生挥手操作：")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210824103028.png",alt:"四次挥手示意图"}})])}),[],!1,null,null,null);v.default=l.exports}}]);