import{_ as s,r as a,o as t,c as n,a as e,b as o,d as c,e as r}from"./app-9a4cd796.js";const l={},h=r('<h1 id="网络安全" tabindex="-1"><a class="header-anchor" href="#网络安全" aria-hidden="true">#</a> 网络安全</h1><h2 id="什么是认证和授权-如何设计一个权限认证框架" tabindex="-1"><a class="header-anchor" href="#什么是认证和授权-如何设计一个权限认证框架" aria-hidden="true">#</a> 什么是认证和授权？如何设计一个权限认证框架？</h2><p>认证：就是对系统访问者的身份进行确认（用户名密码登录、二维码登录、指纹、刷脸...）。</p><p>授权：就是对系统访问者的行为进行控制，授权通常是在认证之后，对系统内的隐私数据进行保护，后台接口访问权限，前台控件的访问权限。</p><p>通常情况下我们通过RBAC模型，也就是用户关联角色 ，而角色访问不同的资源，从而控制用户访问系统的行为。</p><p>认证和授权也是对一个权限认证框架进行评估的两个主要的方面。</p><h2 id="cookie和session有什么区别-如果没有cookie、seesion还能进行身份验证吗" tabindex="-1"><a class="header-anchor" href="#cookie和session有什么区别-如果没有cookie、seesion还能进行身份验证吗" aria-hidden="true">#</a> cookie和session有什么区别？如果没有Cookie、Seesion还能进行身份验证吗？</h2><p>当服务器tomcat第一次接收到客户端的请求时，会开辟一块独立的session空间，建立一个session对象，同时会生成session id，通过响应头的方式保存到客户端浏览器的cookie当中，以后客户端的每次请求，都会在请求头部带上这个session id，这样就可以对应上服务端的一些会话信息，比如用户的登录状态。</p><p>如果没有客户端的cookie，session是无法进行身份验证的。</p><p>当服务端从单体应用升级为分布式之后，cookie + session要如何扩展？</p><ul><li>session黏贴，在负载均衡中，通过某种机制，保证同一个客户端的所有请求都会转发到同一个tomcat实例当中。当这个tomcat实例出现问题之后，请求就会被转发到其他实例，这时候用户的session用户信息就丢失了。</li><li>session复制：当一个tomcat实例上保存了session信息后，主动将session复制到集群中的其他实例。问题：复制是需要时间的，在复制的过程中，容器产生session信息丢失。</li><li>session共享，就是将服务端的session信息保存到一个第三方中，比如Redis</li></ul><h2 id="什么是csrf攻击-如何防止" tabindex="-1"><a class="header-anchor" href="#什么是csrf攻击-如何防止" aria-hidden="true">#</a> 什么是CSRF攻击？如何防止？</h2><p>CSRF：Cross Site Request Forgery 跨站请求伪造。</p><p>一个正常的请求会将合法用户的session id保存到浏览器的cookie，这时候，如果用户在浏览器中打开另一个Tab页，那这个tab页也是可以获得浏览器的cookie，黑客就可以利用这个cookie信息进行攻击</p><p>攻击过程：</p><ol><li><p>某银行网站A可以以GET请求的方式发起转账操作。<em>www.xxx.com/transfor.do?accountNum=100&amp;money=1000</em> accountNum表示目标账户，这个请求肯定是需要登录才可以正常访问的，</p></li><li><p>攻击者在某个论坛或者网站上上传一个图片，链接地址是 <em>www.xxx.com/transfor.do?accountNum=100&amp;money=1000</em>，其中accountNum就是攻击者自己的银行账户。</p></li><li><p>如果有一个用户，登录了银行网站，然后又打开浏览器的另一个Tab页，点击了这个图片，这时，银行就会受理到一个带了正确的cookie的请求，就会完成转账，用户的钱就被盗了。</p></li></ol><p>防止CSRF的方式：</p><ol><li>尽量使用POST请求，限制GET请求，POST请求可以带请求体，攻击者就不容易伪造出请求。</li><li>将cookie设置为HttpOnly：response.setHeader(&quot;Set-Cookie&quot;,&quot;cookiename=cookievalue;HttpOnly&quot;)。</li><li>增加token：在请求中放入一个攻击者无法伪造的信息，并且该信息不存在于cookie当中。</li><li>增加一个额外的隐藏信息<code>&lt;input type=&#39;hidden&#39; value=&#39;demo&#39;&gt;</code>这也是Spring Security框架中采用的防范方式。</li></ol><h2 id="什么是oauth2-有哪几种认证方式" tabindex="-1"><a class="header-anchor" href="#什么是oauth2-有哪几种认证方式" aria-hidden="true">#</a> 什么是OAuth2？有哪几种认证方式？</h2><p>OAuth2.0是一个开放标准，允许用户授权在第三方应用程序访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方应用分享他们数据的所有内容。</p><p>OAuth2.0的协议认证流程，简单理解，就是允许我们将之前的授权和认证过程交给一个独立的第三方进行担保。</p><p>OAuth2.0协议有四种模式：</p><p>授权码模式：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630010003.png" alt="img" style="zoom:67%;"><p>简化模式：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630010013.png" alt="img" style="zoom:67%;"><p>密码模式：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630010023.png" alt="img" style="zoom:67%;"><p>客户端模式：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630010030.png" alt="img" style="zoom:67%;"><p>在梳理OAuth2.0协议流程的过程中，其实有一个主线，就是三方参与者的信任程度。</p><h2 id="什么是jwt令牌-和普通令牌有什么区别" tabindex="-1"><a class="header-anchor" href="#什么是jwt令牌-和普通令牌有什么区别" aria-hidden="true">#</a> 什么是JWT令牌？和普通令牌有什么区别？</h2><p>普通令牌只是一个普通的字符串，没有特殊的意义，这就意味着，当客户端带上令牌去访问应用的接口时，应用本身无法判断这个令牌是否正确，他就需要到授权服务器上去拍段令牌是否有效，在高并发的场景下，检查令牌的网络请求就有可能成为一个性能瓶颈。</p><p>改良的方式就是JWT令牌，将令牌对应的相关信息全部冗余到令牌本身，这样资源服务器就不再需要发送求请给授权服务器去检查令牌了，他自己就可以读取到令牌的授权信息。JWT令牌的本质就是一个加密的字符串。</p><h2 id="什么是sso-与oauth2-0有什么关系" tabindex="-1"><a class="header-anchor" href="#什么是sso-与oauth2-0有什么关系" aria-hidden="true">#</a> 什么是SSO？与OAuth2.0有什么关系？</h2><p>OAuth2.0的使用场景通常称为联合登录，一处注册，多处使用。</p><p>SSO：Single Sign ON：一处登录，多处同时登录。</p><p>SSO的实现关键是将Seesion信息几种存储，通常使用Spring Security实现</p><h2 id="如何实现单点登录系统" tabindex="-1"><a class="header-anchor" href="#如何实现单点登录系统" aria-hidden="true">#</a> 如何实现单点登录系统？</h2>',39),p={href:"https://ke.boxuegu.com/barrier.html#/browse?courseId=3870&barrierId=5043&chapterId=1016",target:"_blank",rel:"noopener noreferrer"},d=e("h2",{id:"如何设计一个开放授权平台",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何设计一个开放授权平台","aria-hidden":"true"},"#"),o(" 如何设计一个开放授权平台？")],-1),u=e("p",null,"开发授权平台可以按照认证和授权两个方向来梳理。",-1),m=e("ul",null,[e("li",null,"认证：可以按照OAuth2.0协议来规划认证的过程"),e("li",null,"授权：首先需要待接入的第三方应用在开放授权平台进行注册，注册需要提供几个必要的信息：clintID，消息推送地址（一堆公私钥），私钥由授权平台自己保存，公钥分发给第三方应用。然后，第三方应用引导可户发起请求时，采用公钥进行参数加密，然后授权开放平台使用对应的私钥解密。接下来，授权开放平台同步响应第三方应用的只是消息是否处理成功的结果，而真正的业务数据由授权开放平台异步推送给第三方应用预留的推送地址。")],-1);function g(b,_){const i=a("ExternalLinkIcon");return t(),n("div",null,[h,e("p",null,[e("a",p,[o("单点登录系统是怎么做的？"),c(i)])]),d,u,m])}const f=s(l,[["render",g],["__file","cyber_security.html.vue"]]);export{f as default};
