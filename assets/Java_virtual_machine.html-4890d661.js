import{_ as a,o as n,c as s,f as t}from"./app-14a55e42.js";const e={},p=t(`<h1 id="java虚拟机" tabindex="-1"><a class="header-anchor" href="#java虚拟机" aria-hidden="true">#</a> Java虚拟机</h1><h2 id="运行时数据区中包含哪些区域-哪些线程共享-哪些线程独享" tabindex="-1"><a class="header-anchor" href="#运行时数据区中包含哪些区域-哪些线程共享-哪些线程独享" aria-hidden="true">#</a> 运行时数据区中包含哪些区域？哪些线程共享？哪些线程独享？</h2><p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630004443.png" alt="img"></p><p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630004452.png" alt="img"></p><h2 id="java-创建一个对象的过程" tabindex="-1"><a class="header-anchor" href="#java-创建一个对象的过程" aria-hidden="true">#</a> Java 创建一个对象的过程？</h2><ul><li>检查类是否已经被加载</li><li>为对象分配内存空间</li><li>为分配的内存空间初始化零值（为对象字段设置零值）</li><li>对对象进行其它设置（设置对象头）</li><li>执行构造方法</li></ul><h2 id="如何访问对象" tabindex="-1"><a class="header-anchor" href="#如何访问对象" aria-hidden="true">#</a> 如何访问对象？</h2><ul><li>使用句柄的方式</li><li>使用直接指针的方式</li></ul><h2 id="java-内存模型的原子性、可见性和有序性是通过哪些操作实现的" tabindex="-1"><a class="header-anchor" href="#java-内存模型的原子性、可见性和有序性是通过哪些操作实现的" aria-hidden="true">#</a> Java 内存模型的原子性、可见性和有序性是通过哪些操作实现的？</h2><ul><li>原子性：synchronized</li><li>可见性：volatile</li><li>有序性：volatile和synchronized</li></ul><h2 id="什么是双亲委派机制-有什么作用" tabindex="-1"><a class="header-anchor" href="#什么是双亲委派机制-有什么作用" aria-hidden="true">#</a> 什么是双亲委派机制？有什么作用？</h2><p>Java的类加载器：AppClassLoader -&gt; ExtClassLoader -&gt; BootStrapClassLoader</p><p>每一种类加载器都有自己的加载目录，Java中的AppClassLoader、ExtClassLoader 都继承了URLClassLoader，URLClassLoader继承了SecureClassLoader，SecureClassLoader又继承了ClassLoader，每个类加载器对他加载过的类，都是有一个缓存的：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210630004512.png" alt="img" style="zoom:50%;"><p>双亲委派：向上委托查找，向下委托，作用：保护Java的层的类不会被应用程序覆盖</p><p>核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span>
<span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// First, check if the class has already been loaded</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ClassNotFoundException thrown if class not found</span>
                <span class="token comment">// from the non-null parent class loader</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// If still not found, then invoke findClass in order</span>
                <span class="token comment">// to find the class.</span>
                <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// this is the defining class loader; record the stats</span>
                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java类加载的全过程是怎么样的" tabindex="-1"><a class="header-anchor" href="#java类加载的全过程是怎么样的" aria-hidden="true">#</a> Java类加载的全过程是怎么样的？</h2><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210727230233.png" alt="Java类加载过程" style="zoom:67%;"><p>类加载过程：加载 -&gt; 连接 -&gt; 初始化 -&gt; 使用 -&gt; 卸载</p><ol><li>加载：把Java的字节码数据加载到JVM内存当中，并映射成JVM认可的数据结构</li><li>连接：可以分为三个小的阶段： <ul><li>验证：检查加载到的字节码信息是否符合JVM规范</li><li>准备：创建类或接口的静态变量，并赋初始值，半初始化状态</li><li>解析：将符号引用转为直接引用</li></ul></li><li>初始化：创建对象</li></ol><h2 id="你了解分代理论吗" tabindex="-1"><a class="header-anchor" href="#你了解分代理论吗" aria-hidden="true">#</a> 你了解分代理论吗？</h2><p>目前绝大部分的JJVM，在针对对象进行垃圾收集的时候，会将对象熬过垃圾收集的次数，视为对象的年龄，依次将对象至少划分为新生代和老年代。分代收集理论基于以下三种假说和经验法则：</p><ul><li><p>弱分代假说</p><p>绝大数对象，在第一次垃圾收集时就会被回收，按照经验法则，这个值高达百分之九十八</p></li><li><p>强分代假说</p><p>熬过越多次收集过程的对象就越难以消亡</p></li><li><p>跨代引用假说</p><p>该假说认为只会存在很少的跨代引用。因为只要经过一些次数的垃圾收集，即使还存在跨代引用，新生代会变成老年代，跨代引用也就自然小时了，所以跨代引用的数量不会多</p></li></ul><p>Java堆分为新生代和老年代，针对收集对象处于哪一代，一共有以下四种收集方式：</p><ul><li>部分收集</li><li>新生代收集（Minor GC/Young GC），只收集新生代垃圾对象</li><li>老年代收集（Major GC/Old GC），只收集老年代垃圾对象，目前只有CMS收集器会单独收集老年代对象</li><li>混合收集（Mixed GC），收集来自整个新生代以及部分老年代中的垃圾对象，目前只有G1会有这种行为</li><li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集</li></ul><h2 id="jdk-中有几种引用类型-分别的特点是什么" tabindex="-1"><a class="header-anchor" href="#jdk-中有几种引用类型-分别的特点是什么" aria-hidden="true">#</a> JDK 中有几种引用类型？分别的特点是什么？</h2><p>在JDK1.2之前，一个对象只有“被引用”或者“未被引用”两种状态，但这种描述方式不能满足所有的场景，譬如我们希望描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空间在垃圾收集器后仍然非常警长，那就可以抛弃这些对象，这个时候就需要对引用的概念进行扩充。</p><table><thead><tr><th>引用类型</th><th>定义</th><th>特点</th></tr></thead><tbody><tr><td>强引用（Strong Reference）</td><td>通过new关键赋值的引用</td><td>只要强引用关系还存在，垃圾收集器永远不会回收掉引用的对象</td></tr><tr><td>软引用（Soft Reference）</td><td>还有用，但非必须的对象</td><td>内存不够时一定会被GC，长期不用也会被GC</td></tr><tr><td>弱引用（Weak Reference）</td><td>非必须对象</td><td>被弱引用关联的对象只能生存到下一次垃圾收集发生为止。无论当前内存是否足够，都会回收</td></tr><tr><td>虚引用（Phantom Reference）</td><td>“幽灵引用”或者“幻影引用”</td><td>对象被垃圾收集器回收时收到一个系统通知</td></tr></tbody></table><h2 id="一个对象从加载到jvm-再到gc清除-都经历了什么过程" tabindex="-1"><a class="header-anchor" href="#一个对象从加载到jvm-再到gc清除-都经历了什么过程" aria-hidden="true">#</a> 一个对象从加载到JVM，再到GC清除，都经历了什么过程？</h2><p>详细步骤说明：</p><ol><li><p>用户创建一个对象，JVM首先需要到方法区去找对象的类型信息，然后再创建对象。</p></li><li><p>JVM要实例化一个对象，首先要在堆中先创建一个对象 -&gt; 半初始化状态</p></li><li><p>对象首先会分配在堆内存中新生代的Eden区，然后经过一次Minor GC，对象如果存活，就会进入S区，在后续的每次GC中，如果对象一直存活，就会在S区来回拷贝，每移动一次，年龄加1，年龄最大值是15，默认就是最大年龄是15。超过年龄先之后，对象转入老年代。</p></li><li><p>当方法执行结束后，栈中的指针会先移除掉。</p></li><li><p>堆中的对象，经过Full GC就会被标记为垃圾，然后被GC线程清理掉。</p></li></ol><h2 id="怎么样确定一个对象不是垃圾" tabindex="-1"><a class="header-anchor" href="#怎么样确定一个对象不是垃圾" aria-hidden="true">#</a> 怎么样确定一个对象不是垃圾？</h2><p>有两种定位垃圾的方式：</p><ol><li>引用计数法：这种方式是给堆内存当中的每个对象记录一个引用个数，引用个数为0的就认为是垃圾。这是早期JDK采用的方式，引用计数无法解决循环引用的问题</li><li>根可达算法：这种方式是在内存中，从引用根对象向下一直找引用，找不到的对象就是垃圾</li></ol><h2 id="什么是gc-root" tabindex="-1"><a class="header-anchor" href="#什么是gc-root" aria-hidden="true">#</a> 什么是GC Root？</h2><ul><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</li><li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量</li><li>在方法区中常量引用的对象，譬如字符串常量池里的引用。</li><li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象</li><li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointException），还有系统类加载器。</li><li>所有被同步锁（synchronized关键字）持有的对象</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><h2 id="jvm有哪些垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#jvm有哪些垃圾回收算法" aria-hidden="true">#</a> JVM有哪些垃圾回收算法？</h2><table><thead><tr><th>算法</th><th>速度</th><th>空间开销</th><th>移动对象</th></tr></thead><tbody><tr><td>Mark-Sweep</td><td>中等</td><td>少（但会堆积碎片）</td><td>否</td></tr><tr><td>Mark-Compact</td><td>最慢</td><td>少（不堆积碎片）</td><td>是</td></tr><tr><td>Copying</td><td>最快</td><td>通常需要活对象的2倍大小（不堆积碎片）</td><td>是</td></tr></tbody></table><h2 id="什么是stw" tabindex="-1"><a class="header-anchor" href="#什么是stw" aria-hidden="true">#</a> 什么是STW？</h2><p>STW：stop the world，是在垃圾回收算法执行过程当中，需要将JVM内存冻结的一种状态，在STW状态下，Java所有的线程都是停止执行的，GC线程除外，只有native方法可以执行，但是，不能与JVM交互，GC各种算法优化的重点，就是减少STW，同时这也是JVM调优的重点。</p><h2 id="jvm有哪些垃圾回收器" tabindex="-1"><a class="header-anchor" href="#jvm有哪些垃圾回收器" aria-hidden="true">#</a> JVM有哪些垃圾回收器？</h2><table><thead><tr><th>收集器</th><th>串行、并行或并发</th><th>新生代、老年代</th><th>算法</th></tr></thead><tbody><tr><td>Serial</td><td>串行</td><td>新生代</td><td>复制算法</td></tr><tr><td>Serial Old</td><td>串行</td><td>老年代</td><td>标记-整理</td></tr><tr><td>ParNew</td><td>并行</td><td>新生代</td><td>复制算法</td></tr><tr><td>Parallel Scavenge</td><td>并行</td><td>新生代</td><td>复制算法</td></tr><tr><td>Parallel Old</td><td>并行</td><td>老年代</td><td>标记-整理</td></tr><tr><td>CMS</td><td>并发</td><td>老年代</td><td>标记-清除</td></tr><tr><td>G1</td><td>并发</td><td>不区分</td><td>标记-整理+复制算法</td></tr></tbody></table><h2 id="什么是三色标记算法" tabindex="-1"><a class="header-anchor" href="#什么是三色标记算法" aria-hidden="true">#</a> 什么是三色标记算法？</h2><p>CMS的核心算法就是三色标记。</p><p>三色标记：是一种逻辑上的抽象，将每个内存对象分成三种颜色：黑色：表示自己和成员变量都已经标记完毕。灰色：自己标记完了，但是成员变量还没有完全标记完。白色：自己未标记完。</p><p>CMS通过增量标记increment update的方式来解决漏标的问题。</p><p>在G1当中采用SATB的方式来避免错标和漏标的情况。</p><h2 id="如何回收方法区" tabindex="-1"><a class="header-anchor" href="#如何回收方法区" aria-hidden="true">#</a> 如何回收方法区？</h2><p>方法区的垃圾回收主要有两种，废弃的常量和无用的类，其中要称为无用的类，要同时满足下面三个条件：</p><ul><li>Java堆中不存在该类的任何实例对象</li><li>加载该类的类加载器已经被回收</li><li>该类对应的java.lang.Class对象不在任何地方被引用，且无法在任何地方通过反射访问该类的方法</li></ul><h2 id="jvm-中的安全点和安全区各代表什么" tabindex="-1"><a class="header-anchor" href="#jvm-中的安全点和安全区各代表什么" aria-hidden="true">#</a> JVM 中的安全点和安全区各代表什么？</h2><h2 id="写屏障你了解吗" tabindex="-1"><a class="header-anchor" href="#写屏障你了解吗" aria-hidden="true">#</a> 写屏障你了解吗？</h2><h2 id="解决并发扫描时对象消失问题的两种方案" tabindex="-1"><a class="header-anchor" href="#解决并发扫描时对象消失问题的两种方案" aria-hidden="true">#</a> 解决并发扫描时对象消失问题的两种方案？</h2><h2 id="cms-垃圾收集器的步骤" tabindex="-1"><a class="header-anchor" href="#cms-垃圾收集器的步骤" aria-hidden="true">#</a> CMS 垃圾收集器的步骤？</h2><p>1、初始标记阶段：STW 只标记出根对象直接引用的对象</p><p>2、并发标记：继续标记其他对象，与应用程序时并发执行</p><p>3、重新标记：STW对并发执行阶段的对象进行重新标记</p><p>4、并发清除：并行。将产生的垃圾清除。清除过程中，应用程序又会不断的产生新的垃圾，叫做浮动垃圾。这些垃圾就要留到下一次GC过程中清除。</p><h2 id="cms-有什么缺点" tabindex="-1"><a class="header-anchor" href="#cms-有什么缺点" aria-hidden="true">#</a> CMS 有什么缺点？</h2><ul><li>CMS收集器对CPU资源非常敏感</li><li>CMS处理器无法处理浮动垃圾</li><li>在收集结束的时候，会产生大量的空间碎片</li></ul><h2 id="g1垃圾收集器的步骤-g1有什么优缺点" tabindex="-1"><a class="header-anchor" href="#g1垃圾收集器的步骤-g1有什么优缺点" aria-hidden="true">#</a> G1垃圾收集器的步骤，G1有什么优缺点？</h2><p>G1的优点：</p><ul><li>停顿时间短</li><li>用户可以指定最大的停顿时间</li><li>不会产生内存碎片：G1的内存布局并不是固定大小以及固定数量的分代区域划分</li></ul><p>缺点：</p><p>G1需要记忆集（卡表）来记录新生代和老年代之间的引用关系，这种数据结构在G1中需要占用大量的内存，可能达到整个堆内存容量的20%甚至更多。而且G1中维护记忆集的成本较高，带来了更高的执行负载，影响效率。</p><p>CMS在小内存应用上的表现要优于G1，而大内存应用上G1更有优化，大小内存的界限是6GB到8GB。</p><h2 id="讲一下内存分配策略" tabindex="-1"><a class="header-anchor" href="#讲一下内存分配策略" aria-hidden="true">#</a> 讲一下内存分配策略？</h2><h2 id="内存溢出和内存泄漏的区别" tabindex="-1"><a class="header-anchor" href="#内存溢出和内存泄漏的区别" aria-hidden="true">#</a> 内存溢出和内存泄漏的区别？</h2><ul><li><p>内存溢出（Out of Memory）是指程序在申请内存时，没有足够的空间供其使用</p></li><li><p>内存泄漏（Memory Leak）是指程序在申请内存后，无法释放已申请的内存空间</p></li></ul><h2 id="如何进行jvm调优" tabindex="-1"><a class="header-anchor" href="#如何进行jvm调优" aria-hidden="true">#</a> 如何进行JVM调优？</h2><p>JVM调优主要是通过定制JVM运行参数来提高Java应用程序的运行速度。</p><h2 id="jvm参数有哪些" tabindex="-1"><a class="header-anchor" href="#jvm参数有哪些" aria-hidden="true">#</a> JVM参数有哪些？</h2><p>JVM参数大致可以分为三类：</p><p>１、标准指令：-开头，这些是所有的HotSpot都支持的参数。可以用Java -help打印出来。</p><p>２、非标准指令：-开头，这些指令通常是跟特定的HotSpot版本对应的，可以用Java -X打印出来</p><p>３、不稳定参数：-XX开头，这一类参数是跟特定HotSpot版本对应的，并且变化非常大，详细的文档资料非常少，在JDK1.8版本下，有几个常用的不稳定指令：Java -XX:+PrintCommandLineFlags：查看当前命令的不稳定指令。</p><h2 id="虚拟机基础故障处理工具有哪些" tabindex="-1"><a class="header-anchor" href="#虚拟机基础故障处理工具有哪些" aria-hidden="true">#</a> 虚拟机基础故障处理工具有哪些？</h2><table><thead><tr><th>工具</th><th>作用</th></tr></thead><tbody><tr><td>jps</td><td>虚拟机进程状况工具</td></tr><tr><td>jstat</td><td>虚拟机统计信息监视工具</td></tr><tr><td>jinfo</td><td>Java配置信息工具</td></tr><tr><td>jmap</td><td>Java内存映射工具</td></tr><tr><td>jstack</td><td>Java堆栈跟踪工具</td></tr><tr><td>JVisualVM</td><td>图形化展示</td></tr><tr><td>JConsole</td><td>远程控制</td></tr></tbody></table><h2 id="怎么查看一个java进程的jvm参数-谈谈你了解的jvm参数" tabindex="-1"><a class="header-anchor" href="#怎么查看一个java进程的jvm参数-谈谈你了解的jvm参数" aria-hidden="true">#</a> 怎么查看一个Java进程的JVM参数，谈谈你了解的JVM参数</h2><p>打印出所有不稳定参数所有默认值：<code>java -XX:+PrintFlagsInitial</code></p><p>打印出所有最终生效的不稳定指令：<code>java -XX:+PrintFlagsFinal</code></p><h2 id="什么情况下堆内存会溢出-什么情况方法区会内存溢出" tabindex="-1"><a class="header-anchor" href="#什么情况下堆内存会溢出-什么情况方法区会内存溢出" aria-hidden="true">#</a> 什么情况下堆内存会溢出，什么情况方法区会内存溢出？</h2><p>栈溢出的典型例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//递归，调用自己</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法区内存溢出的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//递归，调用自己</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,87),i=[p];function l(o,c){return n(),s("div",null,i)}const r=a(e,[["render",l],["__file","Java_virtual_machine.html.vue"]]);export{r as default};
