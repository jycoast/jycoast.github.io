import{_ as a,o as n,c as s,e as t}from"./app-CgJjyikO.js";const e={},o=t(`<h1 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat"><span>Tomcat</span></a></h1><h2 id="tomcat整体架构" tabindex="-1"><a class="header-anchor" href="#tomcat整体架构"><span>Tomcat整体架构</span></a></h2><p>Tomcat是Java Web应用服务器，实现Java EE（Java Platform Enterprise Edition）的部分技术规范，比如Java Servlet、JavaServer Pages、Java Expression Language、Java WebSocket等。</p><p>Tomcat的核心：Http服务器+Serverlet容器</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202303300003726.png" alt="0A23C5C479484C1CAECD2EB6D7805AC2" style="zoom:67%;"><p>我们可以通过Tomcat的server.xml配置文件来加深对Tomcat架构的理解。Tomcat采用了组件化的设计，它的构成组件都是可配置的，其中最外层的是Server，其他组件按照一定的格式要求配置在这个顶层容器中。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Server</span><span class="token punctuation">&gt;</span></span>    //顶层组件，可以包括多个Service
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Service</span><span class="token punctuation">&gt;</span></span>  //顶层组件，可包含一个Engine，多个连接器
	    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span><span class="token punctuation">/&gt;</span></span>//连接器组件，代表通信接口		   
	    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Engine</span><span class="token punctuation">&gt;</span></span>//容器组件，一个Engine组件处理Service中的所有请求，包含多个Host
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span><span class="token punctuation">&gt;</span></span>  //容器组件，处理特定的Host下客户请求，可包含多个Context
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span><span class="token punctuation">/&gt;</span></span>  //容器组件，为特定的Web应用处理所有的客户请求
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Engine</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Service</span><span class="token punctuation">&gt;</span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Server</span><span class="token punctuation">&gt;</span></span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tomcat启动期间会通过解析server.xml，利用反射创建相应的组件，所以xml的标签和源码一一对应。</p><p>Tomcat的架构图如下：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202303300007629.png" alt="AC1E5961456D484C9A8C280D14066AF9" style="zoom:67%;"><p>简化之后的图：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202303300007270.png" alt="934BE96C497D48778A03C89A13465D67" style="zoom:67%;"><p>Tomcat要实现2个核心功能：</p><ul><li>处理Socket连接，负责网络字节流与Request和Response对象的转化</li><li>加载和管理Servlet，以及具体处理Request请求</li></ul><p>因此Tomcat设计了两个核心组件连接器（Connector）和容器（Container）来分别做这两件事情。连接器负责对外交流，容器负责内部处理。</p><h2 id="tomcat核心组件" tabindex="-1"><a class="header-anchor" href="#tomcat核心组件"><span>Tomcat核心组件</span></a></h2><h3 id="server组件" tabindex="-1"><a class="header-anchor" href="#server组件"><span>Server组件</span></a></h3><p>Server组件指的就是整个Tomcat服务器，包含多组服务（Service），负责管理和启动各个Service，同时监听8005端口发过来的shutdown命令，用于关闭整个容器。</p><h3 id="service组件" tabindex="-1"><a class="header-anchor" href="#service组件"><span>Service组件</span></a></h3><p>每个Service组件都包含了若干接收客户端消息的Connector组件和处理请求的Engine组件。Service组件还包含了若干Executor组件，每个Executor都是一个线程池，它可以为Service内所有组件提供线程池执行任务。</p><h3 id="连接器connector组件" tabindex="-1"><a class="header-anchor" href="#连接器connector组件"><span>连接器Connector组件</span></a></h3><p>Tomcat与外部世界的连接器，监听固定端口接收外部请求，传递给Container，并将Container处理的结果返回给外部。连接器对Servlet容器屏蔽了不同的应用层协议及I/O模型，无论是HTTP还是AJP，在容器中获取到的都是一个标准的ServletRequest对象。连接器需要实现的功能：</p><ul><li>监听网络端口</li><li>接收网络连接请求</li><li>获取请求网络字节流</li><li>根据具体应用协议（HTTP/AJP）解析字节流，生成统一的Tomcat Request对象</li><li>将Tomcat Request对象转成标准的Servlet Request</li><li>调用Servlet容器，得到ServletResponse</li><li>将Tomcat Response转成网络字节流</li><li>将响应字节流写会给浏览器</li></ul><p>分析连接器的功能列表，会发现连接器需要完成3个高内聚的功能：</p><ul><li>网络通信</li><li>应用层协议解析</li><li>Tomcat Request/Response 与ServletRequest/ServletResponse的转化</li></ul><p>因此，Tomcat的设计者分别设计了3个组件来实现这3个功能，分别是EndPoint、Processor和Adapter：</p><ul><li>EndPoint负责提供字节流给Processor</li><li>Processor负责提供Tomcat Request对象给Adapter</li><li>Adapter负责提供ServletRequest对象给容器</li></ul><p>由于I/O模型和应用层协议可以自由组合，比如NIO+HTTP或者NIO2+AJP。Tomcat的设计者将网络通信和应用层协议解析放在一起考虑，设计了一个ProtocolHandler的接口来封装这两种变化点。各种协议和通信模型的组合有相应的具体实现类。比如Http11NioProtocol和AjpNioProtocol。</p><p>除了这些变化点，系统也存在一些相对稳定的部分，因此Tomcat设计了一系列抽象基类来封装这些稳定的部分，抽象基类AbstractProtocol实现了ProtocolHandler接口。每一种应用层协议都有自己的抽象基类，比如AbstractAjpProtocol和AbstractHttp11Protocol，具体协议的实现类扩展了协议层抽象基类。</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202304032351641.png" alt="img202304032351641" style="zoom:67%;"><h3 id="protocolhandler组件" tabindex="-1"><a class="header-anchor" href="#protocolhandler组件"><span>ProtocolHandler组件</span></a></h3><p>连接器用ProtocolHandler来处理网络连接和应用层协议，包含两个重要部件：EndPoint和Processor。</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202304040001620.png" alt="https://note.youdao.com/yws/public/resource/aa1ac6def2af8c24275e8655aaa1deb9/xmlnote/AE69B6B27BA1452A96B69D108E2ECB7C/36219" style="zoom:67%;"><p>连接器用ProtocolHandler接口来封装通信协议个I/O模型的差异，ProtocolHandler内部又分为EndPoint和Processor模块，EndPoint负责底层Sokcet通信，Processor负责应用层协议解析。连接器通过适配器Adapter调用容器。</p><h2 id="tomcat线程模型" tabindex="-1"><a class="header-anchor" href="#tomcat线程模型"><span>Tomcat线程模型</span></a></h2><p>MMU内存管理模型。</p><p>Tomcat对JDK线程池的扩展TaskQueue#offer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//we can&#39;t do any checks</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//we are maxed out on threads, simply queue the object</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> parent<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//we have idle threads, just add it to the queue</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getSubmittedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//if we have less threads than maximum force creation of a new thread</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>parent<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//if we reached here, we need to add it to the queue</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在未达到最大线程数的时候，会首先创建线程，只有在达到了线程池最大线程数的时候才会将任务放入到阻塞队列。</p><h2 id="tomcat类加载机制" tabindex="-1"><a class="header-anchor" href="#tomcat类加载机制"><span>Tomcat类加载机制</span></a></h2><h3 id="jvm类加载器" tabindex="-1"><a class="header-anchor" href="#jvm类加载器"><span>JVM类加载器</span></a></h3><ul><li>BootStrapClassLoader（启动类加载器），</li><li>ExtClassLoader（扩展类加载器），</li><li>AppClassLoader（系统类加载器）</li><li>自定义类加载器，用来加载自定义路径下的类</li></ul><h3 id="双亲委托机制" tabindex="-1"><a class="header-anchor" href="#双亲委托机制"><span>双亲委托机制</span></a></h3><p>加载某个类会先委托父加载器寻找目标类，找不到再委托上层父加载器加载，如果所有父加载器在自己的加载路径下都找不到目标类，则在自己的类加载路径中查找并载入目标类。这就是双亲委托机制。</p><p>类加载过程</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202303261718691.png" alt="img202303261718691" style="zoom:67%;"><p>为什么要设计双亲委托机制？</p><ul><li>沙箱安全机制</li><li>避免类的重复加载</li></ul><h3 id="tomcat的类加载机制" tabindex="-1"><a class="header-anchor" href="#tomcat的类加载机制"><span>Tomcat的类加载机制</span></a></h3><p>Tomcat作为Servlet容器，它负责加载Servlet类，此外它还负责加载Servlet所依赖的Jar包。并且Tomcat本身也是一个Java程序，因此它需要加载自己的类和依赖的jar包。</p><p>Tomcat中自定义了一个类加载器WebAppClassLoader，并且给每个Web应用创建一个类加载器实例，每个Context容器负责创建和维护一个WebAppClassLoader加载器实例。其实现的原理就是不同的类加载器实例加载的类被认为是不同的类，即使它们的类名相同（不同类加载器实例加载的类是互相隔离的）。</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202303261733242.png" alt="img202303261733242" style="zoom:60%;"><p>Tomcat拥有不同的自定义类加载器，以实现对各种资源库的控制。Tomcat主要用类加载器解决以下4个问题：</p><ul><li>同一个Web服务器里，各个Web项目各自使用的Java类库要相互隔离</li><li>同一个Web服务器里，各个Web项目之间可以提供共享的Java类库</li><li>为了使服务器不受Web项目的影响，应该使服务器的类库与应用程序的类库相互独立</li><li>对于支持JSP的Web服务器，应该支持热插拔（HotSwap）功能</li></ul><p>Tomcat提供了四组目录供用户存放第三方类库：</p><ul><li>放置在/common目录中：类库可被Tomcat和所有的Web应用程序共同使用</li></ul><h4 id="线程上下文类加载器" tabindex="-1"><a class="header-anchor" href="#线程上下文类加载器"><span>线程上下文类加载器</span></a></h4><h3 id="tomcat热加载和热部署" tabindex="-1"><a class="header-anchor" href="#tomcat热加载和热部署"><span>Tomcat热加载和热部署</span></a></h3>`,58),p=[o];function c(l,i){return n(),s("div",null,p)}const u=a(e,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/middleware/Tomcat/","title":"Tomcat","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Tomcat整体架构","slug":"tomcat整体架构","link":"#tomcat整体架构","children":[]},{"level":2,"title":"Tomcat核心组件","slug":"tomcat核心组件","link":"#tomcat核心组件","children":[{"level":3,"title":"Server组件","slug":"server组件","link":"#server组件","children":[]},{"level":3,"title":"Service组件","slug":"service组件","link":"#service组件","children":[]},{"level":3,"title":"连接器Connector组件","slug":"连接器connector组件","link":"#连接器connector组件","children":[]},{"level":3,"title":"ProtocolHandler组件","slug":"protocolhandler组件","link":"#protocolhandler组件","children":[]}]},{"level":2,"title":"Tomcat线程模型","slug":"tomcat线程模型","link":"#tomcat线程模型","children":[]},{"level":2,"title":"Tomcat类加载机制","slug":"tomcat类加载机制","link":"#tomcat类加载机制","children":[{"level":3,"title":"JVM类加载器","slug":"jvm类加载器","link":"#jvm类加载器","children":[]},{"level":3,"title":"双亲委托机制","slug":"双亲委托机制","link":"#双亲委托机制","children":[]},{"level":3,"title":"Tomcat的类加载机制","slug":"tomcat的类加载机制","link":"#tomcat的类加载机制","children":[]},{"level":3,"title":"Tomcat热加载和热部署","slug":"tomcat热加载和热部署","link":"#tomcat热加载和热部署","children":[]}]}],"git":{"updatedTime":1711519227000,"contributors":[{"name":"jiyongchao","email":"jycoder@163.com","commits":1}]},"filePathRelative":"middleware/Tomcat/README.md","readingTime":{"minutes":6.32,"words":1896},"excerpt":"\\n<h2>Tomcat整体架构</h2>\\n<p>Tomcat是Java Web应用服务器，实现Java EE（Java Platform Enterprise Edition）的部分技术规范，比如Java Servlet、JavaServer Pages、Java Expression Language、Java WebSocket等。</p>\\n<p>Tomcat的核心：Http服务器+Serverlet容器</p>\\n<img src=\\"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img202303300003726.png\\" alt=\\"0A23C5C479484C1CAECD2EB6D7805AC2\\" style=\\"zoom: 67%;\\">"}');export{u as comp,d as data};
