import{_ as e,o as b,c as a,e as o}from"./app-CIVt5rqQ.js";const t={},d=o('<h1 id="dubbo" tabindex="-1"><a class="header-anchor" href="#dubbo"><span>Dubbo</span></a></h1><h2 id="dubbo底层实现原理" tabindex="-1"><a class="header-anchor" href="#dubbo底层实现原理"><span>Dubbo底层实现原理</span></a></h2><p>链接：https://note.youdao.com/ynoteshare/index.html?id=ca746f44f16b862e3189e5f24b3a8e64&amp;type=note&amp;_time=1685805324275</p><h2 id="dubbo3-0新特性" tabindex="-1"><a class="header-anchor" href="#dubbo3-0新特性"><span>Dubbo3.0新特性</span></a></h2><h3 id="dubbo协议" tabindex="-1"><a class="header-anchor" href="#dubbo协议"><span>dubbo协议</span></a></h3><p>dubbo协议由于请求中没有多余的无用的字节，都是必要的字节，因此性能会更好，并且每个Dubbo请求和响应中都有一个请求ID，这样可以基于一个Socket连接同时发送多个Dubbo请求，不用担心请求和响应对不上，所以dubbo协议成为了Dubbo框架中的默认协议。</p><p>但是dubbo协议一旦涉及到跨RPC框架，比如一个Dubbo服务要调用gRPC服务，就比较麻烦了。因为发一个dubbo协议的请求给一个gRPC服务，gRPC服务只会按照gRPC的格式来解析字节流，最终肯定会解析不成功的。</p><p>dubbo协议虽好，但是不够通用，所以这就出现了Triple协议，Triple协议是基于HTTP2，没有性能问题，另外HTTP协议非常通用，兼容起来也比较简单，而且还有很多额外的功能，比如流式调用。</p><h3 id="triple协议" tabindex="-1"><a class="header-anchor" href="#triple协议"><span>Triple协议</span></a></h3><h2 id="dubbo服务注册与引入底层原理" tabindex="-1"><a class="header-anchor" href="#dubbo服务注册与引入底层原理"><span>Dubbo服务注册与引入底层原理</span></a></h2><p>参考链接：https://note.youdao.com/ynoteshare/index.html?id=bbeb46c842c84cfcdbf1d1f040fe40c7&amp;type=note&amp;_time=1685977459844</p><p>服务导出与服务引入的流程图：https://www.processon.com/view/link/62c441e80791293dccaebded</p><h3 id="服务导出" tabindex="-1"><a class="header-anchor" href="#服务导出"><span>服务导出</span></a></h3><h3 id="服务引入" tabindex="-1"><a class="header-anchor" href="#服务引入"><span>服务引入</span></a></h3><h2 id="dubbo服务调用底层原理" tabindex="-1"><a class="header-anchor" href="#dubbo服务调用底层原理"><span>Dubbo服务调用底层原理</span></a></h2><h3 id="http2原理解析" tabindex="-1"><a class="header-anchor" href="#http2原理解析"><span>Http2原理解析</span></a></h3><p>Http2可以支持同时发在一个socket上送多个请求。</p><ul><li>帧长度</li><li>帧类型</li></ul>',18),n=[d];function l(i,h){return b(),a("div",null,n)}const r=e(t,[["render",l],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/framework/dubbo/","title":"Dubbo","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Dubbo底层实现原理","slug":"dubbo底层实现原理","link":"#dubbo底层实现原理","children":[]},{"level":2,"title":"Dubbo3.0新特性","slug":"dubbo3-0新特性","link":"#dubbo3-0新特性","children":[{"level":3,"title":"dubbo协议","slug":"dubbo协议","link":"#dubbo协议","children":[]},{"level":3,"title":"Triple协议","slug":"triple协议","link":"#triple协议","children":[]}]},{"level":2,"title":"Dubbo服务注册与引入底层原理","slug":"dubbo服务注册与引入底层原理","link":"#dubbo服务注册与引入底层原理","children":[{"level":3,"title":"服务导出","slug":"服务导出","link":"#服务导出","children":[]},{"level":3,"title":"服务引入","slug":"服务引入","link":"#服务引入","children":[]}]},{"level":2,"title":"Dubbo服务调用底层原理","slug":"dubbo服务调用底层原理","link":"#dubbo服务调用底层原理","children":[{"level":3,"title":"Http2原理解析","slug":"http2原理解析","link":"#http2原理解析","children":[]}]}],"git":{"updatedTime":1711330972000,"contributors":[{"name":"jiyongchao","email":"jycoder@163.com","commits":1}]},"filePathRelative":"framework/dubbo/README.md","readingTime":{"minutes":1.2,"words":359},"excerpt":"\\n<h2>Dubbo底层实现原理</h2>\\n<p>链接：https://note.youdao.com/ynoteshare/index.html?id=ca746f44f16b862e3189e5f24b3a8e64&amp;type=note&amp;_time=1685805324275</p>\\n<h2>Dubbo3.0新特性</h2>\\n<h3>dubbo协议</h3>\\n<p>dubbo协议由于请求中没有多余的无用的字节，都是必要的字节，因此性能会更好，并且每个Dubbo请求和响应中都有一个请求ID，这样可以基于一个Socket连接同时发送多个Dubbo请求，不用担心请求和响应对不上，所以dubbo协议成为了Dubbo框架中的默认协议。</p>"}');export{r as comp,p as data};
