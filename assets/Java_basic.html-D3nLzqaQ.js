import{_ as e,r as t,o as p,c as l,a,b as i,d as c,e as n}from"./app-CeyiZnYV.js";const o={},r=n(`<h2 id="java语言" tabindex="-1"><a class="header-anchor" href="#java语言"><span>Java语言</span></a></h2><h3 id="jvm、jdk-和-jre-联系与区别" tabindex="-1"><a class="header-anchor" href="#jvm、jdk-和-jre-联系与区别"><span>JVM、JDK 和 JRE 联系与区别？</span></a></h3><p>JVM（Java虚拟机）是运行Java字节码的虚拟机，JVM针对于不同的操作系统有不同的实现（Windows,Linux,Mac os），在不同的操作系统上使用相同的字节码文件可以得到相同的结果。</p><p>Java程序从源代码到运行一般经历下面3个步骤：</p><p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/image-20210629231212350.png" alt="image-20210629231212350"></p><p>JDK（Java Development Kit）是功能齐全的Java SDK，它不止有JRE，还有编译器（Javac）和工具（例如Java doc 和Jdb），它可以创建和编译程序。</p><p>JRE是Java运行时环境，它是运行已经编译的Java程序所需的内容的集合，包括Java虚拟机、Java类库、Java命令和其他的一些基础构件，但是，它不能用来创建新的程序。</p><h3 id="构造器-constructor-是否可被-override" tabindex="-1"><a class="header-anchor" href="#构造器-constructor-是否可被-override"><span>构造器 Constructor 是否可被 override?</span></a></h3><p>构造器无法被重写，但可以重载。</p><h3 id="重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#重载和重写的区别"><span>重载和重写的区别？</span></a></h3><p>重载发生在同一个类中，方法名必须相同，参数类型、个数、顺序不同，方法返回值和修饰值可以不同。</p><h3 id="面向对象编程三大特性-封装-继承-多态" tabindex="-1"><a class="header-anchor" href="#面向对象编程三大特性-封装-继承-多态"><span>面向对象编程三⼤特性: 封装 继承 多态</span></a></h3><ul><li><p>封装</p><p>封装是把一个对象的属性私有化，根据需要提供一些可以被外界访问属性的方法</p></li><li><p>继承</p><p>继承是使用已经存在的类的定义作为基础建立新的类，新类的定义可以增加新的数据或功能，也可以使用父类的功能，子类拥有父类所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问的，子类可以拥有自己的属性和方法，即子类可以对父类进行扩展，子类也可以重写父类的方法。</p></li><li><p>多态</p><p>多态是值程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须是在程序运行期间才能决定。</p></li></ul><h3 id="string-stringbuffer-和-stringbuilder-的区别是什么" tabindex="-1"><a class="header-anchor" href="#string-stringbuffer-和-stringbuilder-的区别是什么"><span>String StringBuffer 和 StringBuilder 的区别是什么?</span></a></h3><ul><li>String：不可变字符序列</li><li>StringBuffer：可变字符序列，效率低，线程安全</li><li>StringBuilder：可变字符序列，效率高，线程不安全</li></ul><h3 id="string类为什么是不可变的" tabindex="-1"><a class="header-anchor" href="#string类为什么是不可变的"><span>String类为什么是不可变的?</span></a></h3><p>在Java中，String被设计成一个不可变的类，也就是常量对象，理由如下：</p><ul><li><p>String常量池需要</p><p>JVM为了提升性能和减少内存开销，设计了字符串常量池，字符串不可变的特性就是其设计基础。</p></li><li><p>缓存Hashcode</p><p>可以将Hash值存储起来，不用每次都计算，会给String作为key的数据结构，例如HashMap、HashTable等带来性能提升。</p></li><li><p>安全</p><p>可以防止通过反射机制等有意或者恶意修改，从而预防安全问题。</p></li><li><p>线程安全</p><p>不可变的对象意味着天生就是线程安全的，可以被多个线程共享。</p></li></ul><p>缺点：对于字符串拼接操作会带来极大的性能消耗，这种情况可以使用StringBuffer、StringBuilder来替代String。</p><h3 id="integer的缓存机制" tabindex="-1"><a class="header-anchor" href="#integer的缓存机制"><span>Integer的缓存机制？</span></a></h3><p>Integer 是对小数据（-128到127）是有缓存的，在JVM初始化的时候，数据-128到127之间的数字便被缓存到了本地内存中，如果初始化-128到127之间的数字，会直接从内存中取出，不需要新建一个对象。</p><h3 id="深拷贝和浅拷贝的区别" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝的区别"><span>深拷贝和浅拷贝的区别？</span></a></h3><p>浅拷贝：对于基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝；</p><p>深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</p><h3 id="接口和抽象类的区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象类的区别"><span>接口和抽象类的区别</span></a></h3><ul><li>接口的方法默认都是public，所有的方法在接口中不能有实现；</li><li>接口中除了static、final变量，不能有其他变量，而抽象类中则不一定；</li><li>一个类可以实现多个接口，但只能实现一个抽象类。但接口本身可以多继承。</li><li>接口方法的默认修饰符是public，抽象类的方法的修复可以是public、protected和default这些修饰符（不能是private）；</li><li>从设计的层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ul><p>以上对JDK8之前的定义和规范，从JDK8开始接口的概念有了一些变化，在JDK7或更早的版本中，接口里面只能由常量、变量和抽象方法，实现接口类必须重写接口中的抽象方法，JDK8接口中增加了默认方法和静态方法，JDK9接口中增加了私有方法和私有静态方法。</p><h3 id="构造方法有哪些特性" tabindex="-1"><a class="header-anchor" href="#构造方法有哪些特性"><span>构造方法有哪些特性？</span></a></h3><ul><li>名称与类名相同</li><li>没有返回值，但不能用void声明构造方法</li><li>生成类的对象时自动执行，无需调用</li><li>默认有一个不带参数的构造方法</li><li>如果显式的指定了带参的构造方法，默认不再提供无参的构造方法</li></ul><p>总的来说构造方法与普通方法的区别如下：</p><table><thead><tr><th>Java构造函数</th><th>Java方法</th></tr></thead><tbody><tr><td>构造器用于初始化对象的状态（状态）</td><td>方法用于暴露对象的行为</td></tr><tr><td>构造函数不能有返回类型</td><td>方法一般都有返回类型</td></tr><tr><td>构造函数隐式调用</td><td>方法要显式的调用</td></tr><tr><td>如果没有指定任何构造函数，java编译器提供一个默认的构造函数</td><td>在任何情况下编译器都不会提供默认的方法调用</td></tr><tr><td>构造函数名称必须与类名称相同</td><td>方法名称可以或可以不与类名称相同</td></tr></tbody></table><h3 id="string中hashcode的实现" tabindex="-1"><a class="header-anchor" href="#string中hashcode的实现"><span>String中hashCode的实现？</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            hash <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashcode和equals的作用" tabindex="-1"><a class="header-anchor" href="#hashcode和equals的作用"><span>hashCode和equals的作用？</span></a></h3><p>两个相同对象</p><h3 id="jdk8有哪些新特性" tabindex="-1"><a class="header-anchor" href="#jdk8有哪些新特性"><span>JDK8有哪些新特性？</span></a></h3><ul><li>Lambda表达式</li><li>函数式接口</li><li>方法引用</li><li>Stream API</li><li>接口中的默认方法和静态</li><li>新的时间和日期API</li><li>Optional</li></ul><h3 id="java反射有哪些作用" tabindex="-1"><a class="header-anchor" href="#java反射有哪些作用"><span>Java反射有哪些作用？</span></a></h3><p>Java的反射机制主要用于实现以下功能：</p><ul><li>在运行时判断任意一个对象所属的类型</li><li>在运行时构造任意一个类的对象</li><li>在运行判断任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的方法，包括private方法</li></ul><h3 id="如何使用反射获取私有属性" tabindex="-1"><a class="header-anchor" href="#如何使用反射获取私有属性"><span>如何使用反射获取私有属性？</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1.获取私有属性</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.获取私有构造方法</span>
<span class="token class-name">Constructor</span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 必须要设置之后才可以访问</span>
cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建对象有哪些方式" tabindex="-1"><a class="header-anchor" href="#创建对象有哪些方式"><span>创建对象有哪些方式？</span></a></h3><p>共有五种方式：</p><ul><li>new关键字</li><li>反射API</li><li>Constructor.newInstance</li><li>Clone()方法</li><li>反序列化</li></ul><h3 id="迭代器和for循环遍历的区别" tabindex="-1"><a class="header-anchor" href="#迭代器和for循环遍历的区别"><span>迭代器和for循环遍历的区别？</span></a></h3><p>迭代器是一种设计模式，可以使得序列类型的数据结构的遍历行为与被遍历的对象分离，即我们无需关心该序列的底层结构是什么样子的。只要拿到这个对象，使用迭代器可以遍历这个对象的内部。</p><p>迭代器实现了Iterabale接口的集合都可以使用迭代器来遍历。使用迭代器遍历元素时，除了查看之外，只能做remove操作。</p><p>增强for循环，内部使用的是迭代器，所以它的操作对象是数组和可以迭代器的结合。遍历时只能查看，无法修改、删除、增加。</p><div class="note warning"><p>迭代出来的元素都是原来集合元素的拷贝，Java集合元素实质是对象的引用，而非对象本身，迭代出的对象也是引用的拷贝，结果还是引用。那么如果集合中保存的元素是可变类型的，那么可以通过迭代出的元素修改原集合中的对象</p></div><p>总的来说，两者的区别主要在于遍历和集合本身是否分离，从数据结构的角度分析，如果使用Iterator来遍历集合的元素，并不需要考虑集合类的内部实现（只要），而如果使用for循环进行遍历，那么遍历此集合的算法都得做相应的调整。</p><h3 id="过滤器和拦截器的区别" tabindex="-1"><a class="header-anchor" href="#过滤器和拦截器的区别"><span>过滤器和拦截器的区别？</span></a></h3><ul><li>过滤器指的是，在java web中，传入的request、response提前过滤一些信息，或者提前设置一些参数，然后传入servlet或者struts的action进行业务逻辑，比如过滤掉非法url。</li><li>拦截器指的是，是在面向切面编程的时候，使用动态代理拦截方法等。</li></ul><h3 id="list、set、map三者的区别" tabindex="-1"><a class="header-anchor" href="#list、set、map三者的区别"><span>List、Set、Map三者的区别？</span></a></h3><p>List用来存储一组不唯一（可以重复），有序的对象；</p><p>Set用来存储不允许重复的集合，不会有多个元素引用相同集合的对象；</p><p>Map是用来存储键值对的，Map会维护与Key有关联的值，两个不同的Key可以引用相同的对象，Key不能重复。</p><h3 id="hashmap实现原理" tabindex="-1"><a class="header-anchor" href="#hashmap实现原理"><span>HashMap实现原理？</span></a></h3>`,58),u={href:"https://tech.meituan.com/2016/06/24/java-hashmap.html",target:"_blank",rel:"noopener noreferrer"},h=n(`<h3 id="hashmap为什么扩容为2倍" tabindex="-1"><a class="header-anchor" href="#hashmap为什么扩容为2倍"><span>HashMap为什么扩容为2倍？</span></a></h3><p>HashMap为了存取高效，要尽量较少碰撞，就是要尽量把数据分配均匀，每个链表长度大致相同，使用的算法是：<code>hash &amp; (length - 1)</code>，实际上<code>hash &amp; (length - 1) = hash % length</code>，主要考虑到模运算的速度比位运算的的快。</p><h3 id="为什么hashmap不用linkedlist-而是选用数组" tabindex="-1"><a class="header-anchor" href="#为什么hashmap不用linkedlist-而是选用数组"><span>为什么HashMap不用LinkedList，而是选用数组？</span></a></h3><p>在HashMap中，定位桶的位置是利用元素的key的哈希值对数组长度取模得到，此时已知桶的位置，使用数组查询的效率会LinkedList大；不使用ArrayList的原因是，ArrayList的扩容机制是1.5倍扩容，无法自定义扩容机制。</p><h3 id="jdk1-8对hashmap有哪些优化" tabindex="-1"><a class="header-anchor" href="#jdk1-8对hashmap有哪些优化"><span>JDK1.8对HashMap有哪些优化？</span></a></h3><ul><li>由数组 + 链表的结构改为了数组 + 链表 + 红黑树</li><li>优化了高位运算的hash算法：<code>h^(h &gt;&gt;&gt; 16)</code></li><li>扩容后，元素要么是在原来的位置，要么是在原位置再移动2次幂的位置，且链表顺序不变</li></ul><h3 id="为什么不直接使用红黑树-而是选择先用链表-再转红黑树" tabindex="-1"><a class="header-anchor" href="#为什么不直接使用红黑树-而是选择先用链表-再转红黑树"><span>为什么不直接使用红黑树，而是选择先用链表，再转红黑树？</span></a></h3><p>因为红黑树需要进行左旋、右旋、变色这些操作来保持平衡，而单链表不需要，当元素小于8个的时候，此时做查询操作，链表结构已经能保证查询性能，当元素大于8个的时候，此时需要红黑树来加速查询速度，但是新增节点的效率变慢了，因此，如果一开始就用红黑树结构，元素太少，新增效率又比较慢，无疑这是浪费性能的。</p><h3 id="hashmap不使用红黑树-而是使用二叉查找树可以吗" tabindex="-1"><a class="header-anchor" href="#hashmap不使用红黑树-而是使用二叉查找树可以吗"><span>HashMap不使用红黑树，而是使用二叉查找树可以吗？</span></a></h3><p>可以，但是二叉查找树在特殊情况下会变成一条线性结构，此时遍历查找会非常慢。</p><h3 id="为什么阈值是8" tabindex="-1"><a class="header-anchor" href="#为什么阈值是8"><span>为什么阈值是8？</span></a></h3><p>hashcode碰撞次数与泊松分布有关，选择8是根据概率统计而选择的。泊松分布的示意图：</p><img src="https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/20210823233913.png" alt="image-20210823233717518" style="zoom:50%;"><h3 id="当链表转为红黑树-什么时候退化为链表" tabindex="-1"><a class="header-anchor" href="#当链表转为红黑树-什么时候退化为链表"><span>当链表转为红黑树，什么时候退化为链表？</span></a></h3><p>等于6的时候退转为链表。中间有差值7可以防止链表和树之间频繁的转换。假设这个互相转换的界限都是8，那么如果一个HashMap不停的插入、删除元素，链表个数会在8左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。</p><h3 id="hashmap在并发编程环境下有什么问题" tabindex="-1"><a class="header-anchor" href="#hashmap在并发编程环境下有什么问题"><span>HashMap在并发编程环境下有什么问题？</span></a></h3><ul><li>多线程扩容，引起的死循环问题</li><li>多线程put的时候可能导致元素丢失</li><li>put非null元素后get出来的却是null</li></ul><h3 id="使用可变类当hashmap的key有什么问题" tabindex="-1"><a class="header-anchor" href="#使用可变类当hashmap的key有什么问题"><span>使用可变类当HashMap的key有什么问题？</span></a></h3><p>hashCode可能发生改变，导致put进去的值，无法get出，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> changeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> objectValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        changeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> objectValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>changeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//hashcode发生了改变</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>changeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何实现一个自定义的class作为hashmap的key" tabindex="-1"><a class="header-anchor" href="#如何实现一个自定义的class作为hashmap的key"><span>如何实现一个自定义的Class作为HashMap的key？</span></a></h3><ul><li>重写hashcode和equals</li><li>如何设计一个不可变类</li></ul><h3 id="两个相同对象没有重写equals方法放到hashmap覆盖吗" tabindex="-1"><a class="header-anchor" href="#两个相同对象没有重写equals方法放到hashmap覆盖吗"><span>两个相同对象没有重写equals方法放到HashMap覆盖吗?</span></a></h3><p>不会覆盖，HashMap使用对象的hashCode方法确定对象在哈希表中的存储位置，并使用equals方法来比较key是否相等，如果对象不重写equals方法，将对象放到HashMap的时候就会调用Object的equals方法，比较地址，这时候就会认为是两个不同的对象，所以不会覆盖。</p><h3 id="hashset实现原理" tabindex="-1"><a class="header-anchor" href="#hashset实现原理"><span>HashSet实现原理？</span></a></h3><p>底层使用HashMap实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// hashMap的value是Object类型</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// HashSet添加元素的方法</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// HashSet删除元素的方法</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">PRESENT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="currenthashmap的实现原理" tabindex="-1"><a class="header-anchor" href="#currenthashmap的实现原理"><span>CurrentHashMap的实现原理？</span></a></h3><p>JDK1.7分段锁的设计，JDK1.8：Node + CAS + Synchronized</p><h3 id="arraylist的实现原理" tabindex="-1"><a class="header-anchor" href="#arraylist的实现原理"><span>ArrayList的实现原理？</span></a></h3><p>ArrayList底层使用一个支持自动扩容的数组来保存所有元素。ArrayList并不是线程安全的，只能在单线程环境下使用，多线程环境下可以使用<code>java.util.Collections.SynchronizedList</code>或<code>java.util.concurrent.CopyOnWriteArrayList</code>来代替。</p>`,31);function d(k,v){const s=t("ExternalLinkIcon");return p(),l("div",null,[r,a("p",null,[a("a",u,[i("Java 8系列之重新认识HashMap - 美团技术团队 (meituan.com)"),c(s)])]),h])}const g=e(o,[["render",d],["__file","Java_basic.html.vue"]]),b=JSON.parse('{"path":"/interview/java_basics/Java_basic.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Java语言","slug":"java语言","link":"#java语言","children":[{"level":3,"title":"JVM、JDK 和 JRE 联系与区别？","slug":"jvm、jdk-和-jre-联系与区别","link":"#jvm、jdk-和-jre-联系与区别","children":[]},{"level":3,"title":"构造器 Constructor 是否可被 override?","slug":"构造器-constructor-是否可被-override","link":"#构造器-constructor-是否可被-override","children":[]},{"level":3,"title":"重载和重写的区别？","slug":"重载和重写的区别","link":"#重载和重写的区别","children":[]},{"level":3,"title":"面向对象编程三⼤特性: 封装 继承 多态","slug":"面向对象编程三大特性-封装-继承-多态","link":"#面向对象编程三大特性-封装-继承-多态","children":[]},{"level":3,"title":"String StringBuffer 和 StringBuilder 的区别是什么?","slug":"string-stringbuffer-和-stringbuilder-的区别是什么","link":"#string-stringbuffer-和-stringbuilder-的区别是什么","children":[]},{"level":3,"title":"String类为什么是不可变的?","slug":"string类为什么是不可变的","link":"#string类为什么是不可变的","children":[]},{"level":3,"title":"Integer的缓存机制？","slug":"integer的缓存机制","link":"#integer的缓存机制","children":[]},{"level":3,"title":"深拷贝和浅拷贝的区别？","slug":"深拷贝和浅拷贝的区别","link":"#深拷贝和浅拷贝的区别","children":[]},{"level":3,"title":"接口和抽象类的区别","slug":"接口和抽象类的区别","link":"#接口和抽象类的区别","children":[]},{"level":3,"title":"构造方法有哪些特性？","slug":"构造方法有哪些特性","link":"#构造方法有哪些特性","children":[]},{"level":3,"title":"String中hashCode的实现？","slug":"string中hashcode的实现","link":"#string中hashcode的实现","children":[]},{"level":3,"title":"hashCode和equals的作用？","slug":"hashcode和equals的作用","link":"#hashcode和equals的作用","children":[]},{"level":3,"title":"JDK8有哪些新特性？","slug":"jdk8有哪些新特性","link":"#jdk8有哪些新特性","children":[]},{"level":3,"title":"Java反射有哪些作用？","slug":"java反射有哪些作用","link":"#java反射有哪些作用","children":[]},{"level":3,"title":"如何使用反射获取私有属性？","slug":"如何使用反射获取私有属性","link":"#如何使用反射获取私有属性","children":[]},{"level":3,"title":"创建对象有哪些方式？","slug":"创建对象有哪些方式","link":"#创建对象有哪些方式","children":[]},{"level":3,"title":"迭代器和for循环遍历的区别？","slug":"迭代器和for循环遍历的区别","link":"#迭代器和for循环遍历的区别","children":[]},{"level":3,"title":"过滤器和拦截器的区别？","slug":"过滤器和拦截器的区别","link":"#过滤器和拦截器的区别","children":[]},{"level":3,"title":"List、Set、Map三者的区别？","slug":"list、set、map三者的区别","link":"#list、set、map三者的区别","children":[]},{"level":3,"title":"HashMap实现原理？","slug":"hashmap实现原理","link":"#hashmap实现原理","children":[]},{"level":3,"title":"HashMap为什么扩容为2倍？","slug":"hashmap为什么扩容为2倍","link":"#hashmap为什么扩容为2倍","children":[]},{"level":3,"title":"为什么HashMap不用LinkedList，而是选用数组？","slug":"为什么hashmap不用linkedlist-而是选用数组","link":"#为什么hashmap不用linkedlist-而是选用数组","children":[]},{"level":3,"title":"JDK1.8对HashMap有哪些优化？","slug":"jdk1-8对hashmap有哪些优化","link":"#jdk1-8对hashmap有哪些优化","children":[]},{"level":3,"title":"为什么不直接使用红黑树，而是选择先用链表，再转红黑树？","slug":"为什么不直接使用红黑树-而是选择先用链表-再转红黑树","link":"#为什么不直接使用红黑树-而是选择先用链表-再转红黑树","children":[]},{"level":3,"title":"HashMap不使用红黑树，而是使用二叉查找树可以吗？","slug":"hashmap不使用红黑树-而是使用二叉查找树可以吗","link":"#hashmap不使用红黑树-而是使用二叉查找树可以吗","children":[]},{"level":3,"title":"为什么阈值是8？","slug":"为什么阈值是8","link":"#为什么阈值是8","children":[]},{"level":3,"title":"当链表转为红黑树，什么时候退化为链表？","slug":"当链表转为红黑树-什么时候退化为链表","link":"#当链表转为红黑树-什么时候退化为链表","children":[]},{"level":3,"title":"HashMap在并发编程环境下有什么问题？","slug":"hashmap在并发编程环境下有什么问题","link":"#hashmap在并发编程环境下有什么问题","children":[]},{"level":3,"title":"使用可变类当HashMap的key有什么问题？","slug":"使用可变类当hashmap的key有什么问题","link":"#使用可变类当hashmap的key有什么问题","children":[]},{"level":3,"title":"如何实现一个自定义的Class作为HashMap的key？","slug":"如何实现一个自定义的class作为hashmap的key","link":"#如何实现一个自定义的class作为hashmap的key","children":[]},{"level":3,"title":"两个相同对象没有重写equals方法放到HashMap覆盖吗?","slug":"两个相同对象没有重写equals方法放到hashmap覆盖吗","link":"#两个相同对象没有重写equals方法放到hashmap覆盖吗","children":[]},{"level":3,"title":"HashSet实现原理？","slug":"hashset实现原理","link":"#hashset实现原理","children":[]},{"level":3,"title":"CurrentHashMap的实现原理？","slug":"currenthashmap的实现原理","link":"#currenthashmap的实现原理","children":[]},{"level":3,"title":"ArrayList的实现原理？","slug":"arraylist的实现原理","link":"#arraylist的实现原理","children":[]}]}],"git":{"updatedTime":1715744893000,"contributors":[{"name":"jiyongchao","email":"jycoder@163.com","commits":1}]},"filePathRelative":"interview/java_basics/Java_basic.md","readingTime":{"minutes":11.54,"words":3462},"excerpt":"<h2>Java语言</h2>\\n<h3>JVM、JDK 和 JRE 联系与区别？</h3>\\n<p>JVM（Java虚拟机）是运行Java字节码的虚拟机，JVM针对于不同的操作系统有不同的实现（Windows,Linux,Mac os），在不同的操作系统上使用相同的字节码文件可以得到相同的结果。</p>\\n<p>Java程序从源代码到运行一般经历下面3个步骤：</p>\\n<p><img src=\\"https://blog-1304855543.cos.ap-guangzhou.myqcloud.com/blog/img/image-20210629231212350.png\\" alt=\\"image-20210629231212350\\"></p>"}');export{g as comp,b as data};
